
Code of Claw Telegraph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000610c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800629c  0800629c  0000729c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006324  08006324  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006324  08006324  00007324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800632c  0800632c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800632c  0800632c  0000732c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006334  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000006c  080063a0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080063a0  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122ed  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002639  00000000  00000000  0001a389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001c9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdf  00000000  00000000  0001da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ed  00000000  00000000  0001e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ead  00000000  00000000  0003aff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7943  00000000  00000000  0004fea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f77e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a80  00000000  00000000  000f7828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fc2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006284 	.word	0x08006284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006284 	.word	0x08006284

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800027a:	4a38      	ldr	r2, [pc, #224]	@ (800035c <HD44780_Init+0xec>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000280:	4b37      	ldr	r3, [pc, #220]	@ (8000360 <HD44780_Init+0xf0>)
 8000282:	2208      	movs	r2, #8
 8000284:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000286:	4b37      	ldr	r3, [pc, #220]	@ (8000364 <HD44780_Init+0xf4>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800028c:	4b33      	ldr	r3, [pc, #204]	@ (800035c <HD44780_Init+0xec>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d907      	bls.n	80002a4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000294:	4b33      	ldr	r3, [pc, #204]	@ (8000364 <HD44780_Init+0xf4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f043 0308 	orr.w	r3, r3, #8
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b31      	ldr	r3, [pc, #196]	@ (8000364 <HD44780_Init+0xf4>)
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e006      	b.n	80002b2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80002a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000364 <HD44780_Init+0xf4>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	f043 0304 	orr.w	r3, r3, #4
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000364 <HD44780_Init+0xf4>)
 80002b0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80002b2:	f000 f985 	bl	80005c0 <DelayInit>
  HAL_Delay(50);
 80002b6:	2032      	movs	r0, #50	@ 0x32
 80002b8:	f001 f9fe 	bl	80016b8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80002bc:	4b28      	ldr	r3, [pc, #160]	@ (8000360 <HD44780_Init+0xf0>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f943 	bl	800054c <ExpanderWrite>
  HAL_Delay(1000);
 80002c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ca:	f001 f9f5 	bl	80016b8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80002ce:	2030      	movs	r0, #48	@ 0x30
 80002d0:	f000 f92b 	bl	800052a <Write4Bits>
  DelayUS(4500);
 80002d4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80002d8:	f000 f99c 	bl	8000614 <DelayUS>

  Write4Bits(0x03 << 4);
 80002dc:	2030      	movs	r0, #48	@ 0x30
 80002de:	f000 f924 	bl	800052a <Write4Bits>
  DelayUS(4500);
 80002e2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80002e6:	f000 f995 	bl	8000614 <DelayUS>

  Write4Bits(0x03 << 4);
 80002ea:	2030      	movs	r0, #48	@ 0x30
 80002ec:	f000 f91d 	bl	800052a <Write4Bits>
  DelayUS(4500);
 80002f0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80002f4:	f000 f98e 	bl	8000614 <DelayUS>

  Write4Bits(0x02 << 4);
 80002f8:	2020      	movs	r0, #32
 80002fa:	f000 f916 	bl	800052a <Write4Bits>
  DelayUS(100);
 80002fe:	2064      	movs	r0, #100	@ 0x64
 8000300:	f000 f988 	bl	8000614 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000304:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <HD44780_Init+0xf4>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	f043 0320 	orr.w	r3, r3, #32
 800030c:	b2db      	uxtb	r3, r3
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f8ce 	bl	80004b0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000314:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <HD44780_Init+0xf8>)
 8000316:	2204      	movs	r2, #4
 8000318:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800031a:	f000 f875 	bl	8000408 <HD44780_Display>
  HD44780_Clear();
 800031e:	f000 f82b 	bl	8000378 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000322:	4b12      	ldr	r3, [pc, #72]	@ (800036c <HD44780_Init+0xfc>)
 8000324:	2202      	movs	r2, #2
 8000326:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000328:	4b10      	ldr	r3, [pc, #64]	@ (800036c <HD44780_Init+0xfc>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f8bc 	bl	80004b0 <SendCommand>
  DelayUS(4500);
 8000338:	f241 1094 	movw	r0, #4500	@ 0x1194
 800033c:	f000 f96a 	bl	8000614 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000340:	490b      	ldr	r1, [pc, #44]	@ (8000370 <HD44780_Init+0x100>)
 8000342:	2000      	movs	r0, #0
 8000344:	f000 f876 	bl	8000434 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000348:	490a      	ldr	r1, [pc, #40]	@ (8000374 <HD44780_Init+0x104>)
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f872 	bl	8000434 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000350:	f000 f81d 	bl	800038e <HD44780_Home>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	2000008b 	.word	0x2000008b
 8000360:	2000008c 	.word	0x2000008c
 8000364:	20000088 	.word	0x20000088
 8000368:	20000089 	.word	0x20000089
 800036c:	2000008a 	.word	0x2000008a
 8000370:	20000000 	.word	0x20000000
 8000374:	20000008 	.word	0x20000008

08000378 <HD44780_Clear>:

void HD44780_Clear()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800037c:	2001      	movs	r0, #1
 800037e:	f000 f897 	bl	80004b0 <SendCommand>
  DelayUS(2000);
 8000382:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000386:	f000 f945 	bl	8000614 <DelayUS>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}

0800038e <HD44780_Home>:

void HD44780_Home()
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000392:	2002      	movs	r0, #2
 8000394:	f000 f88c 	bl	80004b0 <SendCommand>
  DelayUS(2000);
 8000398:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800039c:	f000 f93a 	bl	8000614 <DelayUS>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	460a      	mov	r2, r1
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	4613      	mov	r3, r2
 80003b2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <HD44780_SetCursor+0x5c>)
 80003b6:	f107 0408 	add.w	r4, r7, #8
 80003ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <HD44780_SetCursor+0x60>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d303      	bcc.n	80003d2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <HD44780_SetCursor+0x60>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	3318      	adds	r3, #24
 80003d8:	443b      	add	r3, r7
 80003da:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4413      	add	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	b25b      	sxtb	r3, r3
 80003e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f85d 	bl	80004b0 <SendCommand>
}
 80003f6:	bf00      	nop
 80003f8:	371c      	adds	r7, #28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd90      	pop	{r4, r7, pc}
 80003fe:	bf00      	nop
 8000400:	0800629c 	.word	0x0800629c
 8000404:	2000008b 	.word	0x2000008b

08000408 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <HD44780_Display+0x28>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HD44780_Display+0x28>)
 8000418:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800041a:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <HD44780_Display+0x28>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f843 	bl	80004b0 <SendCommand>
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000089 	.word	0x20000089

08000434 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	6039      	str	r1, [r7, #0]
 800043e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	f003 0307 	and.w	r3, r3, #7
 8000446:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	b25b      	sxtb	r3, r3
 800044e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000452:	b25b      	sxtb	r3, r3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f82a 	bl	80004b0 <SendCommand>
  for (int i=0; i<8; i++)
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	e009      	b.n	8000476 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	4413      	add	r3, r2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f82e 	bl	80004cc <SendChar>
  for (int i=0; i<8; i++)
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b07      	cmp	r3, #7
 800047a:	ddf2      	ble.n	8000462 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800048e:	e006      	b.n	800049e <HD44780_PrintStr+0x18>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	607a      	str	r2, [r7, #4]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f817 	bl	80004cc <SendChar>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1f4      	bne.n	8000490 <HD44780_PrintStr+0xa>
}
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f812 	bl	80004e8 <Send>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SendChar>:

static void SendChar(uint8_t ch)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2101      	movs	r1, #1
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f804 	bl	80004e8 <Send>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	f023 030f 	bic.w	r3, r3, #15
 80004fe:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	4313      	orrs	r3, r2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f80b 	bl	800052a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000514:	7bba      	ldrb	r2, [r7, #14]
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4313      	orrs	r3, r2
 800051a:	b2db      	uxtb	r3, r3
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f804 	bl	800052a <Write4Bits>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f808 	bl	800054c <ExpanderWrite>
  PulseEnable(value);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f820 	bl	8000584 <PulseEnable>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <ExpanderWrite+0x30>)
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4313      	orrs	r3, r2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000562:	f107 020f 	add.w	r2, r7, #15
 8000566:	230a      	movs	r3, #10
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	214e      	movs	r1, #78	@ 0x4e
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <ExpanderWrite+0x34>)
 8000570:	f001 fbfe 	bl	8001d70 <HAL_I2C_Master_Transmit>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000008c 	.word	0x2000008c
 8000580:	20000090 	.word	0x20000090

08000584 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffd8 	bl	800054c <ExpanderWrite>
  DelayUS(20);
 800059c:	2014      	movs	r0, #20
 800059e:	f000 f839 	bl	8000614 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f023 0304 	bic.w	r3, r3, #4
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffce 	bl	800054c <ExpanderWrite>
  DelayUS(20);
 80005b0:	2014      	movs	r0, #20
 80005b2:	f000 f82f 	bl	8000614 <DelayUS>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <DelayInit>:

static void DelayInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <DelayInit+0x4c>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a10      	ldr	r2, [pc, #64]	@ (800060c <DelayInit+0x4c>)
 80005ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005ce:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <DelayInit+0x4c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <DelayInit+0x4c>)
 80005d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005da:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <DelayInit+0x50>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <DelayInit+0x50>)
 80005e2:	f023 0301 	bic.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <DelayInit+0x50>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <DelayInit+0x50>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <DelayInit+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005fa:	bf00      	nop
  __ASM volatile ("NOP");
 80005fc:	bf00      	nop
  __ASM volatile ("NOP");
 80005fe:	bf00      	nop
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000edf0 	.word	0xe000edf0
 8000610:	e0001000 	.word	0xe0001000

08000614 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800061c:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <DelayUS+0x44>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <DelayUS+0x48>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	0c9a      	lsrs	r2, r3, #18
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <DelayUS+0x4c>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <DelayUS+0x4c>)
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	429a      	cmp	r2, r3
 8000646:	d8f6      	bhi.n	8000636 <DelayUS+0x22>
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	371c      	adds	r7, #28
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000010 	.word	0x20000010
 800065c:	431bde83 	.word	0x431bde83
 8000660:	e0001000 	.word	0xe0001000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 ffc0 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f810 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f9d8 	bl	8000a24 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000674:	f000 f8ac 	bl	80007d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000678:	f000 f956 	bl	8000928 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f9a2 	bl	80009c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000680:	f000 f866 	bl	8000750 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Telegraph_Init();
 8000684:	f000 fa1e 	bl	8000ac4 <Telegraph_Init>
  Telegraph_IO_Test();
 8000688:	f000 fa40 	bl	8000b0c <Telegraph_IO_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x28>

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	@ 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800069a:	2228      	movs	r2, #40	@ 0x28
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fa1e 	bl	8005ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2234      	movs	r2, #52	@ 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fa10 	bl	8005ae0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006c0:	2303      	movs	r3, #3
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 ff0a 	bl	8002504 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006f6:	f000 fa73 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000710:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f002 ff32 	bl	8003580 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000722:	f000 fa5d 	bl	8000be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000726:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800072a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4618      	mov	r0, r3
 8000738:	f003 f942 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000742:	f000 fa4d 	bl	8000be0 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3770      	adds	r7, #112	@ 0x70
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <MX_I2C1_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <MX_I2C1_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078a:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800078c:	f001 fa54 	bl	8001c38 <HAL_I2C_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 fa23 	bl	8000be0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800079e:	f001 fe19 	bl	80023d4 <HAL_I2CEx_ConfigAnalogFilter>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 fa1a 	bl	8000be0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_I2C1_Init+0x74>)
 80007b0:	f001 fe5b 	bl	800246a <HAL_I2CEx_ConfigDigitalFilter>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 fa11 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000090 	.word	0x20000090
 80007c8:	40005400 	.word	0x40005400
 80007cc:	2000090e 	.word	0x2000090e

080007d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09a      	sub	sp, #104	@ 0x68
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	222c      	movs	r2, #44	@ 0x2c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f005 f968 	bl	8005ae0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000810:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_TIM1_Init+0x150>)
 8000812:	4a44      	ldr	r2, [pc, #272]	@ (8000924 <MX_TIM1_Init+0x154>)
 8000814:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 8000816:	4b42      	ldr	r3, [pc, #264]	@ (8000920 <MX_TIM1_Init+0x150>)
 8000818:	221e      	movs	r2, #30
 800081a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <MX_TIM1_Init+0x150>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2369;
 8000822:	4b3f      	ldr	r3, [pc, #252]	@ (8000920 <MX_TIM1_Init+0x150>)
 8000824:	f640 1241 	movw	r2, #2369	@ 0x941
 8000828:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b3d      	ldr	r3, [pc, #244]	@ (8000920 <MX_TIM1_Init+0x150>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000830:	4b3b      	ldr	r3, [pc, #236]	@ (8000920 <MX_TIM1_Init+0x150>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b3a      	ldr	r3, [pc, #232]	@ (8000920 <MX_TIM1_Init+0x150>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800083c:	4838      	ldr	r0, [pc, #224]	@ (8000920 <MX_TIM1_Init+0x150>)
 800083e:	f003 fa51 	bl	8003ce4 <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f9ca 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000850:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000852:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000856:	4619      	mov	r1, r3
 8000858:	4831      	ldr	r0, [pc, #196]	@ (8000920 <MX_TIM1_Init+0x150>)
 800085a:	f003 fe4d 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000864:	f000 f9bc 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000868:	482d      	ldr	r0, [pc, #180]	@ (8000920 <MX_TIM1_Init+0x150>)
 800086a:	f003 fae7 	bl	8003e3c <HAL_TIM_PWM_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000874:	f000 f9b4 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000884:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000888:	4619      	mov	r1, r3
 800088a:	4825      	ldr	r0, [pc, #148]	@ (8000920 <MX_TIM1_Init+0x150>)
 800088c:	f004 fb10 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000896:	f000 f9a3 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	@ 0x60
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	4818      	ldr	r0, [pc, #96]	@ (8000920 <MX_TIM1_Init+0x150>)
 80008c0:	f003 fd06 	bl	80042d0 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008ca:	f000 f989 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4807      	ldr	r0, [pc, #28]	@ (8000920 <MX_TIM1_Init+0x150>)
 8000904:	f004 fb3a 	bl	8004f7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800090e:	f000 f967 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <MX_TIM1_Init+0x150>)
 8000914:	f000 fa28 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 8000918:	bf00      	nop
 800091a:	3768      	adds	r7, #104	@ 0x68
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000e4 	.word	0x200000e4
 8000924:	40012c00 	.word	0x40012c00

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000950:	f240 1267 	movw	r2, #359	@ 0x167
 8000954:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800095e:	f240 321f 	movw	r2, #799	@ 0x31f
 8000962:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000970:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000972:	f003 f9b7 	bl	8003ce4 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f930 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800098e:	f003 fdb3 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000998:	f000 f922 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_TIM2_Init+0x98>)
 80009aa:	f004 fa81 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80009b4:	f000 f914 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000130 	.word	0x20000130

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <MX_USART2_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a08:	f004 fb4e 	bl	80050a8 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f8e5 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a13      	ldr	r2, [pc, #76]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_GPIO_Init+0x98>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CB_Pin SB_Pin TB_Pin TRB_Pin
                           SPB_Pin SMB_Pin */
  GPIO_InitStruct.Pin = CB_Pin|SB_Pin|TB_Pin|TRB_Pin
 8000a9a:	233f      	movs	r3, #63	@ 0x3f
 8000a9c:	617b      	str	r3, [r7, #20]
                          |SPB_Pin|SMB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_GPIO_Init+0x9c>)
 8000ab0:	f000 ff38 	bl	8001924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <Telegraph_Init>:

/* USER CODE BEGIN 4 */
void Telegraph_Init(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	// Set up timer 1 PWM and timer 2 interrupt
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <Telegraph_Init+0x3c>)
 8000acc:	f003 fa18 	bl	8003f00 <HAL_TIM_PWM_Start>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	201c      	movs	r0, #28
 8000ad6:	f000 feee 	bl	80018b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ada:	201c      	movs	r0, #28
 8000adc:	f000 ff07 	bl	80018ee <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 8000ae0:	4808      	ldr	r0, [pc, #32]	@ (8000b04 <Telegraph_Init+0x40>)
 8000ae2:	f003 f957 	bl	8003d94 <HAL_TIM_Base_Start_IT>

	// Set up LCD screen
	HD44780_Init(2);
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f7ff fbc2 	bl	8000270 <HD44780_Init>
	HD44780_Clear();
 8000aec:	f7ff fc44 	bl	8000378 <HD44780_Clear>

	temporary_travel = Telegraph_Config_Init();
 8000af0:	f000 fbf8 	bl	80012e4 <Telegraph_Config_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <Telegraph_Init+0x44>)
 8000af8:	6013      	str	r3, [r2, #0]
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000e4 	.word	0x200000e4
 8000b04:	20000130 	.word	0x20000130
 8000b08:	20000204 	.word	0x20000204

08000b0c <Telegraph_IO_Test>:

void Telegraph_IO_Test(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	HD44780_SetCursor(0, 0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fc46 	bl	80003a4 <HD44780_SetCursor>
//	HD44780_PrintStr("HELLO WORLD");

//	char message[15];
//	sprintf(message, "HELLO WORLD\r\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 100);
 8000b18:	2364      	movs	r3, #100	@ 0x64
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	492d      	ldr	r1, [pc, #180]	@ (8000bd4 <Telegraph_IO_Test+0xc8>)
 8000b1e:	482e      	ldr	r0, [pc, #184]	@ (8000bd8 <Telegraph_IO_Test+0xcc>)
 8000b20:	f004 fb10 	bl	8005144 <HAL_UART_Transmit>

	__HAL_TIM_SET_AUTORELOAD(&htim1, CLICK_PERIOD * 2);
 8000b24:	4b2d      	ldr	r3, [pc, #180]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f241 429e 	movw	r2, #5278	@ 0x149e
 8000b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b30:	f241 429e 	movw	r2, #5278	@ 0x149e
 8000b34:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, CLICK_PERIOD);
 8000b36:	4b29      	ldr	r3, [pc, #164]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f640 224f 	movw	r2, #2639	@ 0xa4f
 8000b3e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(500);
 8000b40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b44:	f000 fdb8 	bl	80016b8 <HAL_Delay>

	__HAL_TIM_SET_AUTORELOAD(&htim1, SCRATCH_PERIOD * 2);
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f241 225e 	movw	r2, #4702	@ 0x125e
 8000b50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b52:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b54:	f241 225e 	movw	r2, #4702	@ 0x125e
 8000b58:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SCRATCH_PERIOD);
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f640 122f 	movw	r2, #2351	@ 0x92f
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(500);
 8000b64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b68:	f000 fda6 	bl	80016b8 <HAL_Delay>

	__HAL_TIM_SET_AUTORELOAD(&htim1, TAP_PERIOD * 2);
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f241 025c 	movw	r2, #4188	@ 0x105c
 8000b74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b78:	f241 025c 	movw	r2, #4188	@ 0x105c
 8000b7c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, TAP_PERIOD);
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f640 022e 	movw	r2, #2094	@ 0x82e
 8000b86:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(500);
 8000b88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b8c:	f000 fd94 	bl	80016b8 <HAL_Delay>

	__HAL_TIM_SET_AUTORELOAD(&htim1, SEND_PERIOD * 2);
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f641 0284 	movw	r2, #6276	@ 0x1884
 8000b98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000b9c:	f641 0284 	movw	r2, #6276	@ 0x1884
 8000ba0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SEND_PERIOD);
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f640 4242 	movw	r2, #3138	@ 0xc42
 8000baa:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(500);
 8000bac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bb0:	f000 fd82 	bl	80016b8 <HAL_Delay>

	HD44780_Clear();
 8000bb4:	f7ff fbe0 	bl	8000378 <HD44780_Clear>
	__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <Telegraph_IO_Test+0xd0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	080062ac 	.word	0x080062ac
 8000bd8:	2000017c 	.word	0x2000017c
 8000bdc:	200000e4 	.word	0x200000e4

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a26      	ldr	r2, [pc, #152]	@ (8000cec <HAL_I2C_MspInit+0xb8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d145      	bne.n	8000ce2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c78:	6153      	str	r3, [r2, #20]
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca6:	f000 fe3d 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000caa:	2380      	movs	r3, #128	@ 0x80
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <HAL_I2C_MspInit+0xc0>)
 8000cc6:	f000 fe2d 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_I2C_MspInit+0xbc>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_TIM_Base_MspInit+0x68>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10c      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_TIM_Base_MspInit+0x6c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <HAL_TIM_Base_MspInit+0x6c>)
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <HAL_TIM_Base_MspInit+0x6c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d22:	e018      	b.n	8000d56 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d2c:	d113      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <HAL_TIM_Base_MspInit+0x6c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <HAL_TIM_Base_MspInit+0x6c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_TIM_Base_MspInit+0x6c>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201c      	movs	r0, #28
 8000d4c:	f000 fdb3 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d50:	201c      	movs	r0, #28
 8000d52:	f000 fdcc 	bl	80018ee <HAL_NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40012c00 	.word	0x40012c00
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a11      	ldr	r2, [pc, #68]	@ (8000dcc <HAL_TIM_MspPostInit+0x64>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d11b      	bne.n	8000dc2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_TIM_MspPostInit+0x68>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_TIM_MspPostInit+0x68>)
 8000d90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_TIM_MspPostInit+0x68>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_TIM_MspPostInit+0x6c>)
 8000dbe:	f000 fdb1 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40012c00 	.word	0x40012c00
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <HAL_UART_MspInit+0x7c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d128      	bne.n	8000e4c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_UART_MspInit+0x80>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <HAL_UART_MspInit+0x80>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_UART_MspInit+0x80>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_UART_MspInit+0x80>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_UART_MspInit+0x80>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_UART_MspInit+0x80>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f000 fd6c 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	@ 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40021000 	.word	0x40021000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb2:	f000 fbe1 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (end_of_letter_counter == 1) {
 8000ec2:	4ba8      	ldr	r3, [pc, #672]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d112      	bne.n	8000ef0 <TIM2_IRQHandler+0x34>
		Add_Letter(current_letter[0]);
 8000eca:	4ba7      	ldr	r3, [pc, #668]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa1e 	bl	8001310 <Add_Letter>
//		HAL_UART_Transmit(&huart2, (uint8_t*) input_string, input_string_length, 100);
		current_letter[0] = '\0';
 8000ed4:	4ba4      	ldr	r3, [pc, #656]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
		end_of_letter_counter = 0;
 8000eda:	4ba2      	ldr	r3, [pc, #648]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
		temporary_travel = root;
 8000ee0:	4ba2      	ldr	r3, [pc, #648]	@ (800116c <TIM2_IRQHandler+0x2b0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4aa2      	ldr	r2, [pc, #648]	@ (8001170 <TIM2_IRQHandler+0x2b4>)
 8000ee6:	6013      	str	r3, [r2, #0]

		Move_Cursor(&row, &col);
 8000ee8:	49a2      	ldr	r1, [pc, #648]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8000eea:	48a3      	ldr	r0, [pc, #652]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8000eec:	f000 f96c 	bl	80011c8 <Move_Cursor>
	}

	if (!HAL_GPIO_ReadPin(TRB_GPIO_Port, TRB_Pin)) {
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	48a2      	ldr	r0, [pc, #648]	@ (800117c <TIM2_IRQHandler+0x2c0>)
 8000ef4:	f000 fe88 	bl	8001c08 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d123      	bne.n	8000f46 <TIM2_IRQHandler+0x8a>
			if (!toggle) {
 8000efe:	4ba0      	ldr	r3, [pc, #640]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f083 0301 	eor.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 8150 	beq.w	80011ae <TIM2_IRQHandler+0x2f2>
				toggle = true;
 8000f0e:	4b9c      	ldr	r3, [pc, #624]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]

				if (current_letter[0] != '\0') {
 8000f14:	4b94      	ldr	r3, [pc, #592]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 8148 	beq.w	80011ae <TIM2_IRQHandler+0x2f2>
					Add_Letter(current_letter[0]);
 8000f1e:	4b92      	ldr	r3, [pc, #584]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f9f4 	bl	8001310 <Add_Letter>
					current_letter[0] = '\0';
 8000f28:	4b8f      	ldr	r3, [pc, #572]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
					end_of_letter_counter = 0;
 8000f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
					temporary_travel = root;
 8000f34:	4b8d      	ldr	r3, [pc, #564]	@ (800116c <TIM2_IRQHandler+0x2b0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a8d      	ldr	r2, [pc, #564]	@ (8001170 <TIM2_IRQHandler+0x2b4>)
 8000f3a:	6013      	str	r3, [r2, #0]

					Move_Cursor(&row, &col);
 8000f3c:	498d      	ldr	r1, [pc, #564]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8000f3e:	488e      	ldr	r0, [pc, #568]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8000f40:	f000 f942 	bl	80011c8 <Move_Cursor>
 8000f44:	e133      	b.n	80011ae <TIM2_IRQHandler+0x2f2>
				}
			}
		} else if (!HAL_GPIO_ReadPin(SPB_GPIO_Port, SPB_Pin)) {
 8000f46:	2110      	movs	r1, #16
 8000f48:	488c      	ldr	r0, [pc, #560]	@ (800117c <TIM2_IRQHandler+0x2c0>)
 8000f4a:	f000 fe5d 	bl	8001c08 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d147      	bne.n	8000fe4 <TIM2_IRQHandler+0x128>
			if (!toggle) {
 8000f54:	4b8a      	ldr	r3, [pc, #552]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	f083 0301 	eor.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8125 	beq.w	80011ae <TIM2_IRQHandler+0x2f2>
				toggle = true;
 8000f64:	4b86      	ldr	r3, [pc, #536]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
				char message[10];
				sprintf(message, "%d %d\r\n", row, col);
 8000f6a:	4b83      	ldr	r3, [pc, #524]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b80      	ldr	r3, [pc, #512]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f107 000c 	add.w	r0, r7, #12
 8000f78:	4982      	ldr	r1, [pc, #520]	@ (8001184 <TIM2_IRQHandler+0x2c8>)
 8000f7a:	f004 fd91 	bl	8005aa0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) message, 5, 100);
 8000f7e:	f107 010c 	add.w	r1, r7, #12
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	2205      	movs	r2, #5
 8000f86:	4880      	ldr	r0, [pc, #512]	@ (8001188 <TIM2_IRQHandler+0x2cc>)
 8000f88:	f004 f8dc 	bl	8005144 <HAL_UART_Transmit>

				Move_Cursor(&row, &col);
 8000f8c:	4979      	ldr	r1, [pc, #484]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8000f8e:	487a      	ldr	r0, [pc, #488]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8000f90:	f000 f91a 	bl	80011c8 <Move_Cursor>
				Move_Cursor(&row, &col);
 8000f94:	4977      	ldr	r1, [pc, #476]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8000f96:	4878      	ldr	r0, [pc, #480]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8000f98:	f000 f916 	bl	80011c8 <Move_Cursor>

				sprintf(message, "%d %d\r\n", row, col);
 8000f9c:	4b76      	ldr	r3, [pc, #472]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b74      	ldr	r3, [pc, #464]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	f107 000c 	add.w	r0, r7, #12
 8000faa:	4976      	ldr	r1, [pc, #472]	@ (8001184 <TIM2_IRQHandler+0x2c8>)
 8000fac:	f004 fd78 	bl	8005aa0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) message, 5, 100);
 8000fb0:	f107 010c 	add.w	r1, r7, #12
 8000fb4:	2364      	movs	r3, #100	@ 0x64
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	4873      	ldr	r0, [pc, #460]	@ (8001188 <TIM2_IRQHandler+0x2cc>)
 8000fba:	f004 f8c3 	bl	8005144 <HAL_UART_Transmit>

				Add_Letter(current_letter[0]);
 8000fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f9a4 	bl	8001310 <Add_Letter>
				Add_Letter(' ');
 8000fc8:	2020      	movs	r0, #32
 8000fca:	f000 f9a1 	bl	8001310 <Add_Letter>

				current_letter[0] = '\0';
 8000fce:	4b66      	ldr	r3, [pc, #408]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
				end_of_letter_counter = 0;
 8000fd4:	4b63      	ldr	r3, [pc, #396]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
				temporary_travel = root;
 8000fda:	4b64      	ldr	r3, [pc, #400]	@ (800116c <TIM2_IRQHandler+0x2b0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a64      	ldr	r2, [pc, #400]	@ (8001170 <TIM2_IRQHandler+0x2b4>)
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e0e4      	b.n	80011ae <TIM2_IRQHandler+0x2f2>
			}
		} else if (!HAL_GPIO_ReadPin(SMB_GPIO_Port, SMB_Pin)) {
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	4865      	ldr	r0, [pc, #404]	@ (800117c <TIM2_IRQHandler+0x2c0>)
 8000fe8:	f000 fe0e 	bl	8001c08 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d126      	bne.n	8001040 <TIM2_IRQHandler+0x184>
			if (!toggle) {
 8000ff2:	4b63      	ldr	r3, [pc, #396]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	f083 0301 	eor.w	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80d6 	beq.w	80011ae <TIM2_IRQHandler+0x2f2>
				toggle = true;
 8001002:	4b5f      	ldr	r3, [pc, #380]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart2, (uint8_t*) input_string, input_string_length, 100);
 8001008:	4b60      	ldr	r3, [pc, #384]	@ (800118c <TIM2_IRQHandler+0x2d0>)
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	4b60      	ldr	r3, [pc, #384]	@ (8001190 <TIM2_IRQHandler+0x2d4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29a      	uxth	r2, r3
 8001012:	2364      	movs	r3, #100	@ 0x64
 8001014:	485c      	ldr	r0, [pc, #368]	@ (8001188 <TIM2_IRQHandler+0x2cc>)
 8001016:	f004 f895 	bl	8005144 <HAL_UART_Transmit>
				current_letter[0] = '\0';
 800101a:	4b53      	ldr	r3, [pc, #332]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
				end_of_letter_counter = 0;
 8001020:	4b50      	ldr	r3, [pc, #320]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
				temporary_travel = root;
 8001026:	4b51      	ldr	r3, [pc, #324]	@ (800116c <TIM2_IRQHandler+0x2b0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a51      	ldr	r2, [pc, #324]	@ (8001170 <TIM2_IRQHandler+0x2b4>)
 800102c:	6013      	str	r3, [r2, #0]

				row = 0;
 800102e:	4b52      	ldr	r3, [pc, #328]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
				col = 0;
 8001034:	4b4f      	ldr	r3, [pc, #316]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
				HD44780_Clear();
 800103a:	f7ff f99d 	bl	8000378 <HD44780_Clear>
 800103e:	e0b6      	b.n	80011ae <TIM2_IRQHandler+0x2f2>
			}
		} else if (!HAL_GPIO_ReadPin(CB_GPIO_Port, CB_Pin)) {
 8001040:	2101      	movs	r1, #1
 8001042:	484e      	ldr	r0, [pc, #312]	@ (800117c <TIM2_IRQHandler+0x2c0>)
 8001044:	f000 fde0 	bl	8001c08 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d124      	bne.n	8001098 <TIM2_IRQHandler+0x1dc>
			if (!toggle) {
 800104e:	4b4c      	ldr	r3, [pc, #304]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a8 	beq.w	80011ae <TIM2_IRQHandler+0x2f2>
				toggle = true;
 800105e:	4b48      	ldr	r3, [pc, #288]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]

				HD44780_SetCursor(row, col);
 8001064:	4b44      	ldr	r3, [pc, #272]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4a42      	ldr	r2, [pc, #264]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f998 	bl	80003a4 <HD44780_SetCursor>
				current_letter[0] = Traverse_Tree(&temporary_travel, '\\');
 8001074:	215c      	movs	r1, #92	@ 0x5c
 8001076:	483e      	ldr	r0, [pc, #248]	@ (8001170 <TIM2_IRQHandler+0x2b4>)
 8001078:	f000 f964 	bl	8001344 <Traverse_Tree>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8001082:	701a      	strb	r2, [r3, #0]
				HD44780_PrintStr(current_letter);
 8001084:	4838      	ldr	r0, [pc, #224]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8001086:	f7ff f9fe 	bl	8000486 <HD44780_PrintStr>
				Check_Trie_Root('\\');
 800108a:	205c      	movs	r0, #92	@ 0x5c
 800108c:	f000 f8bc 	bl	8001208 <Check_Trie_Root>

				end_of_letter_counter = 251;
 8001090:	4b34      	ldr	r3, [pc, #208]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 8001092:	22fb      	movs	r2, #251	@ 0xfb
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e08a      	b.n	80011ae <TIM2_IRQHandler+0x2f2>
			}
		} else if (!HAL_GPIO_ReadPin(SB_GPIO_Port, SB_Pin)) {
 8001098:	2102      	movs	r1, #2
 800109a:	4838      	ldr	r0, [pc, #224]	@ (800117c <TIM2_IRQHandler+0x2c0>)
 800109c:	f000 fdb4 	bl	8001c08 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d123      	bne.n	80010ee <TIM2_IRQHandler+0x232>
			if (!toggle) {
 80010a6:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d07c      	beq.n	80011ae <TIM2_IRQHandler+0x2f2>
				toggle = true;
 80010b4:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]

				HD44780_SetCursor(row, col);
 80010ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4a2d      	ldr	r2, [pc, #180]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f96d 	bl	80003a4 <HD44780_SetCursor>
				current_letter[0] = Traverse_Tree(&temporary_travel, '|');
 80010ca:	217c      	movs	r1, #124	@ 0x7c
 80010cc:	4828      	ldr	r0, [pc, #160]	@ (8001170 <TIM2_IRQHandler+0x2b4>)
 80010ce:	f000 f939 	bl	8001344 <Traverse_Tree>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 80010d8:	701a      	strb	r2, [r3, #0]
				HD44780_PrintStr(current_letter);
 80010da:	4823      	ldr	r0, [pc, #140]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 80010dc:	f7ff f9d3 	bl	8000486 <HD44780_PrintStr>
				Check_Trie_Root('|');
 80010e0:	207c      	movs	r0, #124	@ 0x7c
 80010e2:	f000 f891 	bl	8001208 <Check_Trie_Root>

				end_of_letter_counter = 251;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 80010e8:	22fb      	movs	r2, #251	@ 0xfb
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e05f      	b.n	80011ae <TIM2_IRQHandler+0x2f2>
			}
		} else if (!HAL_GPIO_ReadPin(TB_GPIO_Port, TB_Pin)) {
 80010ee:	2104      	movs	r1, #4
 80010f0:	4822      	ldr	r0, [pc, #136]	@ (800117c <TIM2_IRQHandler+0x2c0>)
 80010f2:	f000 fd89 	bl	8001c08 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d14b      	bne.n	8001194 <TIM2_IRQHandler+0x2d8>
			if (!toggle) {
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d051      	beq.n	80011ae <TIM2_IRQHandler+0x2f2>
				toggle = true;
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <TIM2_IRQHandler+0x2c4>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]

				char message[10];
								sprintf(message, "%d %d\r\n", row, col);
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4638      	mov	r0, r7
 800111c:	4919      	ldr	r1, [pc, #100]	@ (8001184 <TIM2_IRQHandler+0x2c8>)
 800111e:	f004 fcbf 	bl	8005aa0 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*) message, 5, 100);
 8001122:	4639      	mov	r1, r7
 8001124:	2364      	movs	r3, #100	@ 0x64
 8001126:	2205      	movs	r2, #5
 8001128:	4817      	ldr	r0, [pc, #92]	@ (8001188 <TIM2_IRQHandler+0x2cc>)
 800112a:	f004 f80b 	bl	8005144 <HAL_UART_Transmit>

				HD44780_SetCursor(row, col);
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <TIM2_IRQHandler+0x2bc>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <TIM2_IRQHandler+0x2b8>)
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f933 	bl	80003a4 <HD44780_SetCursor>
				current_letter[0] = Traverse_Tree(&temporary_travel, '/');
 800113e:	212f      	movs	r1, #47	@ 0x2f
 8001140:	480b      	ldr	r0, [pc, #44]	@ (8001170 <TIM2_IRQHandler+0x2b4>)
 8001142:	f000 f8ff 	bl	8001344 <Traverse_Tree>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 800114c:	701a      	strb	r2, [r3, #0]
				HD44780_PrintStr(current_letter);
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <TIM2_IRQHandler+0x2ac>)
 8001150:	f7ff f999 	bl	8000486 <HD44780_PrintStr>
				Check_Trie_Root('/');
 8001154:	202f      	movs	r0, #47	@ 0x2f
 8001156:	f000 f857 	bl	8001208 <Check_Trie_Root>

				end_of_letter_counter = 251;
 800115a:	4b02      	ldr	r3, [pc, #8]	@ (8001164 <TIM2_IRQHandler+0x2a8>)
 800115c:	22fb      	movs	r2, #251	@ 0xfb
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e025      	b.n	80011ae <TIM2_IRQHandler+0x2f2>
 8001162:	bf00      	nop
 8001164:	20000209 	.word	0x20000209
 8001168:	2000020c 	.word	0x2000020c
 800116c:	2000021c 	.word	0x2000021c
 8001170:	20000204 	.word	0x20000204
 8001174:	2000020f 	.word	0x2000020f
 8001178:	2000020e 	.word	0x2000020e
 800117c:	48000400 	.word	0x48000400
 8001180:	20000208 	.word	0x20000208
 8001184:	080062b0 	.word	0x080062b0
 8001188:	2000017c 	.word	0x2000017c
 800118c:	20000214 	.word	0x20000214
 8001190:	20000218 	.word	0x20000218
			}
		} else {
			toggle = false;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <TIM2_IRQHandler+0x300>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
			if (end_of_letter_counter > 0) {
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <TIM2_IRQHandler+0x304>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <TIM2_IRQHandler+0x2f2>
				end_of_letter_counter--;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <TIM2_IRQHandler+0x304>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <TIM2_IRQHandler+0x304>)
 80011ac:	701a      	strb	r2, [r3, #0]
			}
		}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <TIM2_IRQHandler+0x308>)
 80011b0:	f002 ff8c 	bl	80040cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000208 	.word	0x20000208
 80011c0:	20000209 	.word	0x20000209
 80011c4:	20000130 	.word	0x20000130

080011c8 <Move_Cursor>:

/* USER CODE BEGIN 1 */
void Move_Cursor(uint8_t* row, uint8_t* col) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	if (*row < 15) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b0e      	cmp	r3, #14
 80011d8:	d806      	bhi.n	80011e8 <Move_Cursor+0x20>
		(*row)++;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	701a      	strb	r2, [r3, #0]
	} else {
		(*row) = 0;
		(*col) ^= 1;
	}
}
 80011e6:	e009      	b.n	80011fc <Move_Cursor+0x34>
		(*row) = 0;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
		(*col) ^= 1;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f083 0301 	eor.w	r3, r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <Check_Trie_Root>:

void Check_Trie_Root(char letter) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	if (temporary_travel->data == '-') {
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <Check_Trie_Root+0x3c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b2d      	cmp	r3, #45	@ 0x2d
 800121a:	d10f      	bne.n	800123c <Check_Trie_Root+0x34>
		Move_Cursor(&row, &col);
 800121c:	490a      	ldr	r1, [pc, #40]	@ (8001248 <Check_Trie_Root+0x40>)
 800121e:	480b      	ldr	r0, [pc, #44]	@ (800124c <Check_Trie_Root+0x44>)
 8001220:	f7ff ffd2 	bl	80011c8 <Move_Cursor>
		current_letter[0] = Traverse_Tree(&temporary_travel, letter);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4619      	mov	r1, r3
 8001228:	4806      	ldr	r0, [pc, #24]	@ (8001244 <Check_Trie_Root+0x3c>)
 800122a:	f000 f88b 	bl	8001344 <Traverse_Tree>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <Check_Trie_Root+0x48>)
 8001234:	701a      	strb	r2, [r3, #0]
		HD44780_PrintStr(current_letter);
 8001236:	4806      	ldr	r0, [pc, #24]	@ (8001250 <Check_Trie_Root+0x48>)
 8001238:	f7ff f925 	bl	8000486 <HD44780_PrintStr>
	}
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000204 	.word	0x20000204
 8001248:	2000020f 	.word	0x2000020f
 800124c:	2000020e 	.word	0x2000020e
 8001250:	2000020c 	.word	0x2000020c

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	@ (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f004 fc44 	bl	8005b10 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20004000 	.word	0x20004000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	20000210 	.word	0x20000210
 80012bc:	20000370 	.word	0x20000370

080012c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Telegraph_Config_Init>:

char* input_string;
int input_string_length;
trie_node* root;

trie_node* Telegraph_Config_Init() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	input_string = malloc(sizeof(char) * BASE_STRING_LENGTH);
 80012e8:	2032      	movs	r0, #50	@ 0x32
 80012ea:	f004 fb23 	bl	8005934 <malloc>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <Telegraph_Config_Init+0x24>)
 80012f4:	601a      	str	r2, [r3, #0]
	input_string_length = 0;
 80012f6:	4b05      	ldr	r3, [pc, #20]	@ (800130c <Telegraph_Config_Init+0x28>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

	return Trie_Init();
 80012fc:	f000 f880 	bl	8001400 <Trie_Init>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000214 	.word	0x20000214
 800130c:	20000218 	.word	0x20000218

08001310 <Add_Letter>:

void Add_Letter(char letter) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	*(input_string + input_string_length++) = letter;
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <Add_Letter+0x2c>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <Add_Letter+0x30>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1c59      	adds	r1, r3, #1
 8001324:	4806      	ldr	r0, [pc, #24]	@ (8001340 <Add_Letter+0x30>)
 8001326:	6001      	str	r1, [r0, #0]
 8001328:	4413      	add	r3, r2
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	701a      	strb	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000214 	.word	0x20000214
 8001340:	20000218 	.word	0x20000218

08001344 <Traverse_Tree>:

char Traverse_Tree(trie_node** current_node, char character) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	// Assuming that character is '\\' by default
	uint8_t child = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

	if (character == '|')	child = 1;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	2b7c      	cmp	r3, #124	@ 0x7c
 8001358:	d102      	bne.n	8001360 <Traverse_Tree+0x1c>
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e004      	b.n	800136a <Traverse_Tree+0x26>
	else if (character == '/')	child = 2;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b2f      	cmp	r3, #47	@ 0x2f
 8001364:	d101      	bne.n	800136a <Traverse_Tree+0x26>
 8001366:	2302      	movs	r3, #2
 8001368:	73fb      	strb	r3, [r7, #15]

	if (!(*current_node)->children[child]) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <Traverse_Tree+0x56>
		char letter = (*current_node)->data;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	73bb      	strb	r3, [r7, #14]
		Add_Letter((*current_node)->data);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ffc1 	bl	8001310 <Add_Letter>
		*current_node = root;
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <Traverse_Tree+0x74>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
		return letter;
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	e00a      	b.n	80013b0 <Traverse_Tree+0x6c>
	} else {
		*current_node = (*current_node)->children[child];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
		return (*current_node)->data;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	781b      	ldrb	r3, [r3, #0]
//		Add_Letter((*current_node)->data);
//		*current_node = root;
//	}

//	return (*current_node)->data;
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000021c 	.word	0x2000021c

080013bc <Make_Trie_Node>:



trie_node* Make_Trie_Node (char data) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
    trie_node* node = (trie_node*) calloc(1, sizeof(trie_node));
 80013c6:	2110      	movs	r1, #16
 80013c8:	2001      	movs	r0, #1
 80013ca:	f004 fa97 	bl	80058fc <calloc>
 80013ce:	4603      	mov	r3, r0
 80013d0:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 3; i++)     node->children[i] = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e008      	b.n	80013ea <Make_Trie_Node+0x2e>
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	ddf3      	ble.n	80013d8 <Make_Trie_Node+0x1c>
    node->data = data;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	701a      	strb	r2, [r3, #0]

    return node;
 80013f6:	68bb      	ldr	r3, [r7, #8]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <Trie_Init>:
    free(node);
}



trie_node* Trie_Init (void) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
    // Base layer : no input
	root = Make_Trie_Node('-');
 8001406:	202d      	movs	r0, #45	@ 0x2d
 8001408:	f7ff ffd8 	bl	80013bc <Make_Trie_Node>
 800140c:	4603      	mov	r3, r0
 800140e:	4a61      	ldr	r2, [pc, #388]	@ (8001594 <Trie_Init+0x194>)
 8001410:	6013      	str	r3, [r2, #0]

    trie_node* temp = root;
 8001412:	4b60      	ldr	r3, [pc, #384]	@ (8001594 <Trie_Init+0x194>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	607b      	str	r3, [r7, #4]

    // First layer : single input
    temp->children[0] = Make_Trie_Node('e');
 8001418:	2065      	movs	r0, #101	@ 0x65
 800141a:	f7ff ffcf 	bl	80013bc <Make_Trie_Node>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('a');
 8001424:	2061      	movs	r0, #97	@ 0x61
 8001426:	f7ff ffc9 	bl	80013bc <Make_Trie_Node>
 800142a:	4602      	mov	r2, r0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('i');
 8001430:	2069      	movs	r0, #105	@ 0x69
 8001432:	f7ff ffc3 	bl	80013bc <Make_Trie_Node>
 8001436:	4602      	mov	r2, r0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]

    // Second layer, click first input : two inputs
    temp = root->children[0];
 800143c:	4b55      	ldr	r3, [pc, #340]	@ (8001594 <Trie_Init+0x194>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	607b      	str	r3, [r7, #4]
    temp->children[0] = Make_Trie_Node('p');
 8001444:	2070      	movs	r0, #112	@ 0x70
 8001446:	f7ff ffb9 	bl	80013bc <Make_Trie_Node>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('q');
 8001450:	2071      	movs	r0, #113	@ 0x71
 8001452:	f7ff ffb3 	bl	80013bc <Make_Trie_Node>
 8001456:	4602      	mov	r2, r0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('r');
 800145c:	2072      	movs	r0, #114	@ 0x72
 800145e:	f7ff ffad 	bl	80013bc <Make_Trie_Node>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60da      	str	r2, [r3, #12]

    // Second layer, tap first input : two inputs
    temp = root->children[2];
 8001468:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <Trie_Init+0x194>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	607b      	str	r3, [r7, #4]
    temp->children[0] = Make_Trie_Node('s');
 8001470:	2073      	movs	r0, #115	@ 0x73
 8001472:	f7ff ffa3 	bl	80013bc <Make_Trie_Node>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('t');
 800147c:	2074      	movs	r0, #116	@ 0x74
 800147e:	f7ff ff9d 	bl	80013bc <Make_Trie_Node>
 8001482:	4602      	mov	r2, r0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('u');
 8001488:	2075      	movs	r0, #117	@ 0x75
 800148a:	f7ff ff97 	bl	80013bc <Make_Trie_Node>
 800148e:	4602      	mov	r2, r0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]

    // Second layer, scratch first input: two inputs
    temp = root->children[1];
 8001494:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <Trie_Init+0x194>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	607b      	str	r3, [r7, #4]
    temp->children[0] = Make_Trie_Node('b');
 800149c:	2062      	movs	r0, #98	@ 0x62
 800149e:	f7ff ff8d 	bl	80013bc <Make_Trie_Node>
 80014a2:	4602      	mov	r2, r0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('c');
 80014a8:	2063      	movs	r0, #99	@ 0x63
 80014aa:	f7ff ff87 	bl	80013bc <Make_Trie_Node>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('d');
 80014b4:	2064      	movs	r0, #100	@ 0x64
 80014b6:	f7ff ff81 	bl	80013bc <Make_Trie_Node>
 80014ba:	4602      	mov	r2, r0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	60da      	str	r2, [r3, #12]

    // Third layer, scratch first input, click second input : three inputs
    trie_node* scratch_temp = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	603b      	str	r3, [r7, #0]
    temp = scratch_temp->children[0];
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	607b      	str	r3, [r7, #4]
    temp->children[0] = Make_Trie_Node('j');
 80014ca:	206a      	movs	r0, #106	@ 0x6a
 80014cc:	f7ff ff76 	bl	80013bc <Make_Trie_Node>
 80014d0:	4602      	mov	r2, r0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('k');
 80014d6:	206b      	movs	r0, #107	@ 0x6b
 80014d8:	f7ff ff70 	bl	80013bc <Make_Trie_Node>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('l');
 80014e2:	206c      	movs	r0, #108	@ 0x6c
 80014e4:	f7ff ff6a 	bl	80013bc <Make_Trie_Node>
 80014e8:	4602      	mov	r2, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60da      	str	r2, [r3, #12]

    // Third layer, scratch first input, tap second input : three inputs
    temp = scratch_temp->children[2];
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	607b      	str	r3, [r7, #4]
    temp->children[0] = Make_Trie_Node('m');
 80014f4:	206d      	movs	r0, #109	@ 0x6d
 80014f6:	f7ff ff61 	bl	80013bc <Make_Trie_Node>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('n');
 8001500:	206e      	movs	r0, #110	@ 0x6e
 8001502:	f7ff ff5b 	bl	80013bc <Make_Trie_Node>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('o');
 800150c:	206f      	movs	r0, #111	@ 0x6f
 800150e:	f7ff ff55 	bl	80013bc <Make_Trie_Node>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]

    // Third layer, scratch first and second input : three inputs
    temp = scratch_temp->children[1];
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	607b      	str	r3, [r7, #4]
    temp->children[0] = Make_Trie_Node('f');
 800151e:	2066      	movs	r0, #102	@ 0x66
 8001520:	f7ff ff4c 	bl	80013bc <Make_Trie_Node>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('g');
 800152a:	2067      	movs	r0, #103	@ 0x67
 800152c:	f7ff ff46 	bl	80013bc <Make_Trie_Node>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('h');
 8001536:	2068      	movs	r0, #104	@ 0x68
 8001538:	f7ff ff40 	bl	80013bc <Make_Trie_Node>
 800153c:	4602      	mov	r2, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60da      	str	r2, [r3, #12]

    // Fourth layer, scratch first and second input, click third input : four inputs
    temp->children[0]->children[0] = Make_Trie_Node('v');
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685c      	ldr	r4, [r3, #4]
 8001546:	2076      	movs	r0, #118	@ 0x76
 8001548:	f7ff ff38 	bl	80013bc <Make_Trie_Node>
 800154c:	4603      	mov	r3, r0
 800154e:	6063      	str	r3, [r4, #4]

    // Fourth layer, scratch first and second input, tap third input : four inputs
    temp->children[2]->children[2] = Make_Trie_Node('w');
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68dc      	ldr	r4, [r3, #12]
 8001554:	2077      	movs	r0, #119	@ 0x77
 8001556:	f7ff ff31 	bl	80013bc <Make_Trie_Node>
 800155a:	4603      	mov	r3, r0
 800155c:	60e3      	str	r3, [r4, #12]

    // Fourth layer, scratch fist, second and third inputs : four inputs
    temp = temp->children[1];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	607b      	str	r3, [r7, #4]
    temp->children[0] = Make_Trie_Node('x');
 8001564:	2078      	movs	r0, #120	@ 0x78
 8001566:	f7ff ff29 	bl	80013bc <Make_Trie_Node>
 800156a:	4602      	mov	r2, r0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]
    temp->children[1] = Make_Trie_Node('z');
 8001570:	207a      	movs	r0, #122	@ 0x7a
 8001572:	f7ff ff23 	bl	80013bc <Make_Trie_Node>
 8001576:	4602      	mov	r2, r0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
    temp->children[2] = Make_Trie_Node('y');
 800157c:	2079      	movs	r0, #121	@ 0x79
 800157e:	f7ff ff1d 	bl	80013bc <Make_Trie_Node>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]

    return root;
 8001588:	4b02      	ldr	r3, [pc, #8]	@ (8001594 <Trie_Init+0x194>)
 800158a:	681b      	ldr	r3, [r3, #0]

}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	2000021c 	.word	0x2000021c

08001598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800159c:	f7ff fe90 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	@ (80015d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <LoopForever+0xe>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	@ (80015e4 <LoopForever+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f004 faa9 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ca:	f7ff f84b 	bl	8000664 <main>

080015ce <LoopForever>:

LoopForever:
    b LoopForever
 80015ce:	e7fe      	b.n	80015ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015dc:	08006334 	.word	0x08006334
  ldr r2, =_sbss
 80015e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015e4:	2000036c 	.word	0x2000036c

080015e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_IRQHandler>
	...

080015ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <HAL_Init+0x28>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_Init+0x28>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f94f 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff faf0 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f967 	bl	800190a <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f92f 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000010 	.word	0x20000010
 8001670:	20000018 	.word	0x20000018
 8001674:	20000014 	.word	0x20000014

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000018 	.word	0x20000018
 800169c:	20000220 	.word	0x20000220

080016a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000220 	.word	0x20000220

080016b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000018 	.word	0x20000018

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4907      	ldr	r1, [pc, #28]	@ (800179c <__NVIC_EnableIRQ+0x38>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	@ (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	@ (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff29 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff3e 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff8e 	bl	80017f4 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5d 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff31 	bl	8001764 <__NVIC_EnableIRQ>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffa2 	bl	800185c <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e14e      	b.n	8001bd2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8140 	beq.w	8001bcc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d005      	beq.n	8001964 <HAL_GPIO_Init+0x40>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d017      	beq.n	8001a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d123      	bne.n	8001a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0203 	and.w	r2, r3, #3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 809a 	beq.w	8001bcc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a98:	4b55      	ldr	r3, [pc, #340]	@ (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a54      	ldr	r2, [pc, #336]	@ (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b52      	ldr	r3, [pc, #328]	@ (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab0:	4a50      	ldr	r2, [pc, #320]	@ (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ada:	d013      	beq.n	8001b04 <HAL_GPIO_Init+0x1e0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a46      	ldr	r2, [pc, #280]	@ (8001bf8 <HAL_GPIO_Init+0x2d4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_GPIO_Init+0x1dc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a45      	ldr	r2, [pc, #276]	@ (8001bfc <HAL_GPIO_Init+0x2d8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x1d8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a44      	ldr	r2, [pc, #272]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_GPIO_Init+0x1d4>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e006      	b.n	8001b06 <HAL_GPIO_Init+0x1e2>
 8001af8:	2305      	movs	r3, #5
 8001afa:	e004      	b.n	8001b06 <HAL_GPIO_Init+0x1e2>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_Init+0x1e2>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_GPIO_Init+0x1e2>
 8001b04:	2300      	movs	r3, #0
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	f002 0203 	and.w	r2, r2, #3
 8001b0c:	0092      	lsls	r2, r2, #2
 8001b0e:	4093      	lsls	r3, r2
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b16:	4937      	ldr	r1, [pc, #220]	@ (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b24:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b48:	4a2e      	ldr	r2, [pc, #184]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b72:	4a24      	ldr	r2, [pc, #144]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b78:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b9c:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <HAL_GPIO_Init+0x2e0>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f aea9 	bne.w	8001934 <HAL_GPIO_Init+0x10>
  }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	48000400 	.word	0x48000400
 8001bfc:	48000800 	.word	0x48000800
 8001c00:	48000c00 	.word	0x48000c00
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e08d      	b.n	8001d66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe ffe8 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	@ 0x24
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e006      	b.n	8001cc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d108      	bne.n	8001cda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	e007      	b.n	8001cea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ce8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
 8001d80:	4613      	mov	r3, r2
 8001d82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	f040 80fd 	bne.w	8001f8c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2C_Master_Transmit+0x30>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0f6      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x21e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001da8:	f7ff fc7a 	bl	80016a0 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2319      	movs	r3, #25
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f914 	bl	8001fe8 <I2C_WaitOnFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0e1      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2221      	movs	r2, #33	@ 0x21
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	893a      	ldrh	r2, [r7, #8]
 8001dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2bff      	cmp	r3, #255	@ 0xff
 8001dfa:	d906      	bls.n	8001e0a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	22ff      	movs	r2, #255	@ 0xff
 8001e00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e007      	b.n	8001e1a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001e14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d024      	beq.n	8001e6c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f98 <HAL_I2C_Master_Transmit+0x228>)
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fa83 	bl	8002370 <I2C_TransferConfig>
 8001e6a:	e066      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	8979      	ldrh	r1, [r7, #10]
 8001e74:	4b48      	ldr	r3, [pc, #288]	@ (8001f98 <HAL_I2C_Master_Transmit+0x228>)
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fa78 	bl	8002370 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e80:	e05b      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	6a39      	ldr	r1, [r7, #32]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f907 	bl	800209a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07b      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d034      	beq.n	8001f3a <HAL_I2C_Master_Transmit+0x1ca>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d130      	bne.n	8001f3a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2180      	movs	r1, #128	@ 0x80
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f880 	bl	8001fe8 <I2C_WaitOnFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e04d      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2bff      	cmp	r3, #255	@ 0xff
 8001efa:	d90e      	bls.n	8001f1a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	22ff      	movs	r2, #255	@ 0xff
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fa2c 	bl	8002370 <I2C_TransferConfig>
 8001f18:	e00f      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	8979      	ldrh	r1, [r7, #10]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fa1b 	bl	8002370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d19e      	bne.n	8001e82 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	6a39      	ldr	r1, [r7, #32]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f8ed 	bl	8002128 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e01a      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <HAL_I2C_Master_Transmit+0x22c>)
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	80002000 	.word	0x80002000
 8001f9c:	fe00e800 	.word	0xfe00e800

08001fa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d103      	bne.n	8001fbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d007      	beq.n	8001fdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	619a      	str	r2, [r3, #24]
  }
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ff8:	e03b      	b.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f8d6 	bl	80021b0 <I2C_IsErrorOccurred>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e041      	b.n	8002092 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d02d      	beq.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002016:	f7ff fb43 	bl	80016a0 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d302      	bcc.n	800202c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d122      	bne.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4013      	ands	r3, r2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	429a      	cmp	r2, r3
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	429a      	cmp	r2, r3
 8002048:	d113      	bne.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f043 0220 	orr.w	r2, r3, #32
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4013      	ands	r3, r2
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	bf0c      	ite	eq
 8002082:	2301      	moveq	r3, #1
 8002084:	2300      	movne	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	429a      	cmp	r2, r3
 800208e:	d0b4      	beq.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a6:	e033      	b.n	8002110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f87f 	bl	80021b0 <I2C_IsErrorOccurred>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e031      	b.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d025      	beq.n	8002110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff faec 	bl	80016a0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d11a      	bne.n	8002110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d013      	beq.n	8002110 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e007      	b.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d1c4      	bne.n	80020a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002134:	e02f      	b.n	8002196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f838 	bl	80021b0 <I2C_IsErrorOccurred>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e02d      	b.n	80021a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff faa9 	bl	80016a0 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11a      	bne.n	8002196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b20      	cmp	r3, #32
 800216c:	d013      	beq.n	8002196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f043 0220 	orr.w	r2, r3, #32
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e007      	b.n	80021a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d1c8      	bne.n	8002136 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	@ 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d068      	beq.n	80022ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2210      	movs	r2, #16
 80021e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021e4:	e049      	b.n	800227a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d045      	beq.n	800227a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7ff fa57 	bl	80016a0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_IsErrorOccurred+0x54>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d13a      	bne.n	800227a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002216:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002226:	d121      	bne.n	800226c <I2C_IsErrorOccurred+0xbc>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800222e:	d01d      	beq.n	800226c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b20      	cmp	r3, #32
 8002234:	d01a      	beq.n	800226c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002244:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002246:	f7ff fa2b 	bl	80016a0 <HAL_GetTick>
 800224a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800224c:	e00e      	b.n	800226c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800224e:	f7ff fa27 	bl	80016a0 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b19      	cmp	r3, #25
 800225a:	d907      	bls.n	800226c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f043 0320 	orr.w	r3, r3, #32
 8002262:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800226a:	e006      	b.n	800227a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b20      	cmp	r3, #32
 8002278:	d1e9      	bne.n	800224e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b20      	cmp	r3, #32
 8002286:	d003      	beq.n	8002290 <I2C_IsErrorOccurred+0xe0>
 8002288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0aa      	beq.n	80021e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002314:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800231c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01c      	beq.n	800235e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff fe3b 	bl	8001fa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <I2C_IsErrorOccurred+0x1bc>)
 8002336:	400b      	ands	r3, r1
 8002338:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	431a      	orrs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800235e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002362:	4618      	mov	r0, r3
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	fe00e800 	.word	0xfe00e800

08002370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	817b      	strh	r3, [r7, #10]
 800237e:	4613      	mov	r3, r2
 8002380:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002382:	897b      	ldrh	r3, [r7, #10]
 8002384:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002388:	7a7b      	ldrb	r3, [r7, #9]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002390:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	4313      	orrs	r3, r2
 800239a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800239e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	0d5b      	lsrs	r3, r3, #21
 80023aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80023ae:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <I2C_TransferConfig+0x60>)
 80023b0:	430b      	orrs	r3, r1
 80023b2:	43db      	mvns	r3, r3
 80023b4:	ea02 0103 	and.w	r1, r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	03ff63ff 	.word	0x03ff63ff

080023d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d138      	bne.n	800245c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e032      	b.n	800245e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	@ 0x24
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b20      	cmp	r3, #32
 800247e:	d139      	bne.n	80024f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800248a:	2302      	movs	r3, #2
 800248c:	e033      	b.n	80024f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2224      	movs	r2, #36	@ 0x24
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800250a:	af00      	add	r7, sp, #0
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002514:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f001 b823 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 817d 	beq.w	800283a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002540:	4bbc      	ldr	r3, [pc, #752]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b04      	cmp	r3, #4
 800254a:	d00c      	beq.n	8002566 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800254c:	4bb9      	ldr	r3, [pc, #740]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d15c      	bne.n	8002612 <HAL_RCC_OscConfig+0x10e>
 8002558:	4bb6      	ldr	r3, [pc, #728]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002564:	d155      	bne.n	8002612 <HAL_RCC_OscConfig+0x10e>
 8002566:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800256a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800257a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_RCC_OscConfig+0x94>
 8002592:	4ba8      	ldr	r3, [pc, #672]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	e015      	b.n	80025c4 <HAL_RCC_OscConfig+0xc0>
 8002598:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800259c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80025c0:	4b9c      	ldr	r3, [pc, #624]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025c8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80025cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80025d0:	fa92 f2a2 	rbit	r2, r2
 80025d4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80025d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80025dc:	fab2 f282 	clz	r2, r2
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f002 021f 	and.w	r2, r2, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 811f 	beq.w	8002838 <HAL_RCC_OscConfig+0x334>
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 8116 	bne.w	8002838 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f000 bfaf 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x12e>
 8002624:	4b83      	ldr	r3, [pc, #524]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a82      	ldr	r2, [pc, #520]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	e036      	b.n	80026a0 <HAL_RCC_OscConfig+0x19c>
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x158>
 8002642:	4b7c      	ldr	r3, [pc, #496]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7b      	ldr	r2, [pc, #492]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b79      	ldr	r3, [pc, #484]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a78      	ldr	r2, [pc, #480]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e021      	b.n	80026a0 <HAL_RCC_OscConfig+0x19c>
 800265c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002660:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x184>
 800266e:	4b71      	ldr	r3, [pc, #452]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a70      	ldr	r2, [pc, #448]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6e      	ldr	r3, [pc, #440]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6d      	ldr	r2, [pc, #436]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x19c>
 8002688:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a69      	ldr	r2, [pc, #420]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b67      	ldr	r3, [pc, #412]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a66      	ldr	r2, [pc, #408]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a0:	4b64      	ldr	r3, [pc, #400]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	f023 020f 	bic.w	r2, r3, #15
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	495f      	ldr	r1, [pc, #380]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d059      	beq.n	800277e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe ffe9 	bl	80016a0 <HAL_GetTick>
 80026ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe ffe4 	bl	80016a0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	@ 0x64
 80026e2:	d902      	bls.n	80026ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	f000 bf43 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
 80026ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80026fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0x218>
 8002716:	4b47      	ldr	r3, [pc, #284]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	e015      	b.n	8002748 <HAL_RCC_OscConfig+0x244>
 800271c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002720:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002730:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002734:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002738:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002744:	4b3b      	ldr	r3, [pc, #236]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800274c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002750:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002754:	fa92 f2a2 	rbit	r2, r2
 8002758:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800275c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f042 0220 	orr.w	r2, r2, #32
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f002 021f 	and.w	r2, r2, #31
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ab      	beq.n	80026d4 <HAL_RCC_OscConfig+0x1d0>
 800277c:	e05d      	b.n	800283a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe ff8f 	bl	80016a0 <HAL_GetTick>
 8002782:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe ff8a 	bl	80016a0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	@ 0x64
 8002796:	d902      	bls.n	800279e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	f000 bee9 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
 800279e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027a2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80027b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2cc>
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e015      	b.n	80027fc <HAL_RCC_OscConfig+0x2f8>
 80027d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80027e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027e8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80027f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <HAL_RCC_OscConfig+0x330>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002800:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002804:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002808:	fa92 f2a2 	rbit	r2, r2
 800280c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002810:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f002 021f 	and.w	r2, r2, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ab      	bne.n	8002788 <HAL_RCC_OscConfig+0x284>
 8002830:	e003      	b.n	800283a <HAL_RCC_OscConfig+0x336>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 817d 	beq.w	8002b4a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002850:	4ba6      	ldr	r3, [pc, #664]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800285c:	4ba3      	ldr	r3, [pc, #652]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d172      	bne.n	800294e <HAL_RCC_OscConfig+0x44a>
 8002868:	4ba0      	ldr	r3, [pc, #640]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d16c      	bne.n	800294e <HAL_RCC_OscConfig+0x44a>
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002886:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d102      	bne.n	80028a4 <HAL_RCC_OscConfig+0x3a0>
 800289e:	4b93      	ldr	r3, [pc, #588]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	e013      	b.n	80028cc <HAL_RCC_OscConfig+0x3c8>
 80028a4:	2302      	movs	r3, #2
 80028a6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80028c8:	4b88      	ldr	r3, [pc, #544]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	2202      	movs	r2, #2
 80028ce:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80028d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80028de:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCC_OscConfig+0x410>
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d002      	beq.n	8002914 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f000 be2e 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b75      	ldr	r3, [pc, #468]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	21f8      	movs	r1, #248	@ 0xf8
 800292a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002932:	fa91 f1a1 	rbit	r1, r1
 8002936:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800293a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800293e:	fab1 f181 	clz	r1, r1
 8002942:	b2c9      	uxtb	r1, r1
 8002944:	408b      	lsls	r3, r1
 8002946:	4969      	ldr	r1, [pc, #420]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294c:	e0fd      	b.n	8002b4a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8088 	beq.w	8002a70 <HAL_RCC_OscConfig+0x56c>
 8002960:	2301      	movs	r3, #1
 8002962:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002972:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002980:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fe88 	bl	80016a0 <HAL_GetTick>
 8002990:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002996:	f7fe fe83 	bl	80016a0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d902      	bls.n	80029ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	f000 bde2 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80029be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x4d8>
 80029d6:	4b45      	ldr	r3, [pc, #276]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e013      	b.n	8002a04 <HAL_RCC_OscConfig+0x500>
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80029f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a00:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002a16:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a1a:	fab2 f282 	clz	r2, r2
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f002 021f 	and.w	r2, r2, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0af      	beq.n	8002996 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	21f8      	movs	r1, #248	@ 0xf8
 8002a4c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a54:	fa91 f1a1 	rbit	r1, r1
 8002a58:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a5c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a60:	fab1 f181 	clz	r1, r1
 8002a64:	b2c9      	uxtb	r1, r1
 8002a66:	408b      	lsls	r3, r1
 8002a68:	4920      	ldr	r1, [pc, #128]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
 8002a6e:	e06c      	b.n	8002b4a <HAL_RCC_OscConfig+0x646>
 8002a70:	2301      	movs	r3, #1
 8002a72:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	461a      	mov	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fe00 	bl	80016a0 <HAL_GetTick>
 8002aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fdfb 	bl	80016a0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	f000 bd5a 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d104      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5ec>
 8002ae6:	4b01      	ldr	r3, [pc, #4]	@ (8002aec <HAL_RCC_OscConfig+0x5e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	e015      	b.n	8002b18 <HAL_RCC_OscConfig+0x614>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	2302      	movs	r3, #2
 8002af2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b02:	2302      	movs	r3, #2
 8002b04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b14:	4bc8      	ldr	r3, [pc, #800]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002b1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b22:	fa92 f2a2 	rbit	r2, r2
 8002b26:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f002 021f 	and.w	r2, r2, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ad      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8110 	beq.w	8002d80 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d079      	beq.n	8002c64 <HAL_RCC_OscConfig+0x760>
 8002b70:	2301      	movs	r3, #1
 8002b72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4bab      	ldr	r3, [pc, #684]	@ (8002e3c <HAL_RCC_OscConfig+0x938>)
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	461a      	mov	r2, r3
 8002b96:	2301      	movs	r3, #1
 8002b98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fd81 	bl	80016a0 <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fd7c 	bl	80016a0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d902      	bls.n	8002bba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f000 bcdb 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c14:	4b88      	ldr	r3, [pc, #544]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c20:	2102      	movs	r1, #2
 8002c22:	6019      	str	r1, [r3, #0]
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f1a3 	rbit	r1, r3
 8002c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c3a:	6019      	str	r1, [r3, #0]
  return result;
 8002c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0a0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x6a0>
 8002c62:	e08d      	b.n	8002d80 <HAL_RCC_OscConfig+0x87c>
 8002c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c86:	601a      	str	r2, [r3, #0]
  return result;
 8002c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b68      	ldr	r3, [pc, #416]	@ (8002e3c <HAL_RCC_OscConfig+0x938>)
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fcfb 	bl	80016a0 <HAL_GetTick>
 8002caa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fcf6 	bl	80016a0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d902      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f000 bc55 	b.w	8003570 <HAL_RCC_OscConfig+0x106c>
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cce:	2202      	movs	r2, #2
 8002cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fa93 f2a3 	rbit	r2, r3
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d3e:	2102      	movs	r1, #2
 8002d40:	6019      	str	r1, [r3, #0]
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f1a3 	rbit	r1, r3
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d58:	6019      	str	r1, [r3, #0]
  return result;
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d197      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 81a1 	beq.w	80030d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9c:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d116      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
 8002db4:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dca:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <HAL_RCC_OscConfig+0x93c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11a      	bne.n	8002e18 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <HAL_RCC_OscConfig+0x93c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a16      	ldr	r2, [pc, #88]	@ (8002e40 <HAL_RCC_OscConfig+0x93c>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fe fc57 	bl	80016a0 <HAL_GetTick>
 8002df2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	e009      	b.n	8002e0c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fe fc52 	bl	80016a0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	@ 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e3b1      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <HAL_RCC_OscConfig+0x93c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ef      	beq.n	8002df8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10d      	bne.n	8002e44 <HAL_RCC_OscConfig+0x940>
 8002e28:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4a02      	ldr	r2, [pc, #8]	@ (8002e38 <HAL_RCC_OscConfig+0x934>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	e03c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x9ac>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	10908120 	.word	0x10908120
 8002e40:	40007000 	.word	0x40007000
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x96a>
 8002e54:	4bc1      	ldr	r3, [pc, #772]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4ac0      	ldr	r2, [pc, #768]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	4bbe      	ldr	r3, [pc, #760]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4abd      	ldr	r2, [pc, #756]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e66:	f023 0304 	bic.w	r3, r3, #4
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e020      	b.n	8002eb0 <HAL_RCC_OscConfig+0x9ac>
 8002e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x994>
 8002e7e:	4bb7      	ldr	r3, [pc, #732]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4ab6      	ldr	r2, [pc, #728]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6213      	str	r3, [r2, #32]
 8002e8a:	4bb4      	ldr	r3, [pc, #720]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4ab3      	ldr	r2, [pc, #716]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6213      	str	r3, [r2, #32]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x9ac>
 8002e98:	4bb0      	ldr	r3, [pc, #704]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4aaf      	ldr	r2, [pc, #700]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	4bad      	ldr	r3, [pc, #692]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4aac      	ldr	r2, [pc, #688]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002eaa:	f023 0304 	bic.w	r3, r3, #4
 8002eae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8081 	beq.w	8002fc4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fbed 	bl	80016a0 <HAL_GetTick>
 8002ec6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fbe8 	bl	80016a0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e345      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002eec:	2202      	movs	r2, #2
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f10:	2202      	movs	r2, #2
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f2a3 	rbit	r2, r3
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f2a:	601a      	str	r2, [r3, #0]
  return result;
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d102      	bne.n	8002f50 <HAL_RCC_OscConfig+0xa4c>
 8002f4a:	4b84      	ldr	r3, [pc, #528]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	e013      	b.n	8002f78 <HAL_RCC_OscConfig+0xa74>
 8002f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f58:	2202      	movs	r2, #2
 8002f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	4b79      	ldr	r3, [pc, #484]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f80:	2102      	movs	r1, #2
 8002f82:	6011      	str	r1, [r2, #0]
 8002f84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f88:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	fa92 f1a2 	rbit	r1, r2
 8002f92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f96:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f9a:	6011      	str	r1, [r2, #0]
  return result;
 8002f9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	fab2 f282 	clz	r2, r2
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d084      	beq.n	8002ecc <HAL_RCC_OscConfig+0x9c8>
 8002fc2:	e07f      	b.n	80030c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fb6c 	bl	80016a0 <HAL_GetTick>
 8002fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fe fb67 	bl	80016a0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e2c4      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fee:	2202      	movs	r2, #2
 8002ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003012:	2202      	movs	r2, #2
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800302c:	601a      	str	r2, [r3, #0]
  return result;
 800302e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003032:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003036:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d102      	bne.n	8003052 <HAL_RCC_OscConfig+0xb4e>
 800304c:	4b43      	ldr	r3, [pc, #268]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	e013      	b.n	800307a <HAL_RCC_OscConfig+0xb76>
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	4b39      	ldr	r3, [pc, #228]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800307e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003082:	2102      	movs	r1, #2
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800308a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fa92 f1a2 	rbit	r1, r2
 8003094:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003098:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800309c:	6011      	str	r1, [r2, #0]
  return result;
 800309e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d184      	bne.n	8002fce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030cc:	4b23      	ldr	r3, [pc, #140]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4a22      	ldr	r2, [pc, #136]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 80030d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8242 	beq.w	800356e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <HAL_RCC_OscConfig+0xc58>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	f000 8213 	beq.w	800351e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b02      	cmp	r3, #2
 8003106:	f040 8162 	bne.w	80033ce <HAL_RCC_OscConfig+0xeca>
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003112:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800312e:	601a      	str	r2, [r3, #0]
  return result;
 8003130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003134:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003138:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003144:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe faa6 	bl	80016a0 <HAL_GetTick>
 8003154:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003158:	e00c      	b.n	8003174 <HAL_RCC_OscConfig+0xc70>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fa9e 	bl	80016a0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1fd      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800317c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003198:	601a      	str	r2, [r3, #0]
  return result;
 800319a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d102      	bne.n	80031be <HAL_RCC_OscConfig+0xcba>
 80031b8:	4bb0      	ldr	r3, [pc, #704]	@ (800347c <HAL_RCC_OscConfig+0xf78>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	e027      	b.n	800320e <HAL_RCC_OscConfig+0xd0a>
 80031be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	fa93 f2a3 	rbit	r2, r3
 8003200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003204:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	4b9c      	ldr	r3, [pc, #624]	@ (800347c <HAL_RCC_OscConfig+0xf78>)
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003212:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003216:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800321a:	6011      	str	r1, [r2, #0]
 800321c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003220:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	fa92 f1a2 	rbit	r1, r2
 800322a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003232:	6011      	str	r1, [r2, #0]
  return result;
 8003234:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003238:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	fab2 f282 	clz	r2, r2
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f042 0220 	orr.w	r2, r2, #32
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f002 021f 	and.w	r2, r2, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d182      	bne.n	8003160 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325a:	4b88      	ldr	r3, [pc, #544]	@ (800347c <HAL_RCC_OscConfig+0xf78>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	430b      	orrs	r3, r1
 800327c:	497f      	ldr	r1, [pc, #508]	@ (800347c <HAL_RCC_OscConfig+0xf78>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
 8003282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003286:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800328a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800328e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032a6:	601a      	str	r2, [r3, #0]
  return result;
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	461a      	mov	r2, r3
 80032c4:	2301      	movs	r3, #1
 80032c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe f9ea 	bl	80016a0 <HAL_GetTick>
 80032cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d0:	e009      	b.n	80032e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fe f9e5 	bl	80016a0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e144      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
 80032e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f2a3 	rbit	r2, r3
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800330a:	601a      	str	r2, [r3, #0]
  return result;
 800330c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003310:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003314:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_RCC_OscConfig+0xe2c>
 800332a:	4b54      	ldr	r3, [pc, #336]	@ (800347c <HAL_RCC_OscConfig+0xf78>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	e027      	b.n	8003380 <HAL_RCC_OscConfig+0xe7c>
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800333c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800335e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003368:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	4b3f      	ldr	r3, [pc, #252]	@ (800347c <HAL_RCC_OscConfig+0xf78>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003384:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003388:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003392:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fa92 f1a2 	rbit	r1, r2
 800339c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033a4:	6011      	str	r1, [r2, #0]
  return result;
 80033a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033aa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	fab2 f282 	clz	r2, r2
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f042 0220 	orr.w	r2, r2, #32
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f002 021f 	and.w	r2, r2, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d082      	beq.n	80032d2 <HAL_RCC_OscConfig+0xdce>
 80033cc:	e0cf      	b.n	800356e <HAL_RCC_OscConfig+0x106a>
 80033ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fa93 f2a3 	rbit	r2, r3
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033f2:	601a      	str	r2, [r3, #0]
  return result;
 80033f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003408:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	2300      	movs	r3, #0
 8003412:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe f944 	bl	80016a0 <HAL_GetTick>
 8003418:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	e009      	b.n	8003432 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe f93f 	bl	80016a0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e09e      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800343a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800343e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003456:	601a      	str	r2, [r3, #0]
  return result;
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003460:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d104      	bne.n	8003480 <HAL_RCC_OscConfig+0xf7c>
 8003476:	4b01      	ldr	r3, [pc, #4]	@ (800347c <HAL_RCC_OscConfig+0xf78>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e029      	b.n	80034d0 <HAL_RCC_OscConfig+0xfcc>
 800347c:	40021000 	.word	0x40021000
 8003480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003484:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003488:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800348c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003492:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f2a3 	rbit	r2, r3
 80034c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	4b2b      	ldr	r3, [pc, #172]	@ (800357c <HAL_RCC_OscConfig+0x1078>)
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034d4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034dc:	6011      	str	r1, [r2, #0]
 80034de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034e2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	fa92 f1a2 	rbit	r1, r2
 80034ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034f0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034f4:	6011      	str	r1, [r2, #0]
  return result;
 80034f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034fa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f042 0220 	orr.w	r2, r2, #32
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f002 021f 	and.w	r2, r2, #31
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d180      	bne.n	800341e <HAL_RCC_OscConfig+0xf1a>
 800351c:	e027      	b.n	800356e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e01e      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003532:	4b12      	ldr	r3, [pc, #72]	@ (800357c <HAL_RCC_OscConfig+0x1078>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800353a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800353e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	429a      	cmp	r2, r3
 8003550:	d10b      	bne.n	800356a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003552:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003556:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800355a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000

08003580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b09e      	sub	sp, #120	@ 0x78
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e162      	b.n	800385e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b90      	ldr	r3, [pc, #576]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b8d      	ldr	r3, [pc, #564]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	498b      	ldr	r1, [pc, #556]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b89      	ldr	r3, [pc, #548]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e14a      	b.n	800385e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b82      	ldr	r3, [pc, #520]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	497f      	ldr	r1, [pc, #508]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80dc 	beq.w	80037ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d13c      	bne.n	8003676 <HAL_RCC_ClockConfig+0xf6>
 80035fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003600:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800360a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d102      	bne.n	8003626 <HAL_RCC_ClockConfig+0xa6>
 8003620:	4b6f      	ldr	r3, [pc, #444]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	e00f      	b.n	8003646 <HAL_RCC_ClockConfig+0xc6>
 8003626:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800362a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	667b      	str	r3, [r7, #100]	@ 0x64
 8003634:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003638:	663b      	str	r3, [r7, #96]	@ 0x60
 800363a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003642:	4b67      	ldr	r3, [pc, #412]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800364a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800364c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800364e:	fa92 f2a2 	rbit	r2, r2
 8003652:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d17b      	bne.n	800376a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0f3      	b.n	800385e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d13c      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x178>
 800367e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003682:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800368c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x128>
 80036a2:	4b4f      	ldr	r3, [pc, #316]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	e00f      	b.n	80036c8 <HAL_RCC_ClockConfig+0x148>
 80036a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80036bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036c4:	4b46      	ldr	r3, [pc, #280]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036cc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036d0:	fa92 f2a2 	rbit	r2, r2
 80036d4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80036d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f042 0220 	orr.w	r2, r2, #32
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d13a      	bne.n	800376a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0b2      	b.n	800385e <HAL_RCC_ClockConfig+0x2de>
 80036f8:	2302      	movs	r3, #2
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d102      	bne.n	8003720 <HAL_RCC_ClockConfig+0x1a0>
 800371a:	4b31      	ldr	r3, [pc, #196]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	e00d      	b.n	800373c <HAL_RCC_ClockConfig+0x1bc>
 8003720:	2302      	movs	r3, #2
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	2302      	movs	r3, #2
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	4b29      	ldr	r3, [pc, #164]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	2202      	movs	r2, #2
 800373e:	61ba      	str	r2, [r7, #24]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	617a      	str	r2, [r7, #20]
  return result;
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f042 0220 	orr.w	r2, r2, #32
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f002 021f 	and.w	r2, r2, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e079      	b.n	800385e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	491a      	ldr	r1, [pc, #104]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7fd ff90 	bl	80016a0 <HAL_GetTick>
 8003780:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fd ff8c 	bl	80016a0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e061      	b.n	800385e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_ClockConfig+0x260>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d214      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 0207 	bic.w	r2, r3, #7
 80037c2:	4906      	ldr	r1, [pc, #24]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <HAL_RCC_ClockConfig+0x25c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e040      	b.n	800385e <HAL_RCC_ClockConfig+0x2de>
 80037dc:	40022000 	.word	0x40022000
 80037e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <HAL_RCC_ClockConfig+0x2e8>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	491a      	ldr	r1, [pc, #104]	@ (8003868 <HAL_RCC_ClockConfig+0x2e8>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380e:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <HAL_RCC_ClockConfig+0x2e8>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4912      	ldr	r1, [pc, #72]	@ (8003868 <HAL_RCC_ClockConfig+0x2e8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003822:	f000 f829 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003826:	4601      	mov	r1, r0
 8003828:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <HAL_RCC_ClockConfig+0x2e8>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003830:	22f0      	movs	r2, #240	@ 0xf0
 8003832:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	fa92 f2a2 	rbit	r2, r2
 800383a:	60fa      	str	r2, [r7, #12]
  return result;
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	fab2 f282 	clz	r2, r2
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	40d3      	lsrs	r3, r2
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x2ec>)
 8003848:	5cd3      	ldrb	r3, [r2, r3]
 800384a:	fa21 f303 	lsr.w	r3, r1, r3
 800384e:	4a08      	ldr	r2, [pc, #32]	@ (8003870 <HAL_RCC_ClockConfig+0x2f0>)
 8003850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <HAL_RCC_ClockConfig+0x2f4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd fede 	bl	8001618 <HAL_InitTick>
  
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3778      	adds	r7, #120	@ 0x78
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	080062b8 	.word	0x080062b8
 8003870:	20000010 	.word	0x20000010
 8003874:	20000014 	.word	0x20000014

08003878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003892:	4b1e      	ldr	r3, [pc, #120]	@ (800390c <HAL_RCC_GetSysClockFreq+0x94>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d002      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x30>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x36>
 80038a6:	e026      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a8:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x98>)
 80038aa:	613b      	str	r3, [r7, #16]
      break;
 80038ac:	e026      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0c9b      	lsrs	r3, r3, #18
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	4a17      	ldr	r2, [pc, #92]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80038bc:	4b13      	ldr	r3, [pc, #76]	@ (800390c <HAL_RCC_GetSysClockFreq+0x94>)
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	4a14      	ldr	r2, [pc, #80]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e004      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a0c      	ldr	r2, [pc, #48]	@ (800391c <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	e002      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x98>)
 80038f8:	613b      	str	r3, [r7, #16]
      break;
 80038fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fc:	693b      	ldr	r3, [r7, #16]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	007a1200 	.word	0x007a1200
 8003914:	080062d0 	.word	0x080062d0
 8003918:	080062e0 	.word	0x080062e0
 800391c:	003d0900 	.word	0x003d0900

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000010 	.word	0x20000010

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800393e:	f7ff ffef 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003942:	4601      	mov	r1, r0
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800394c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003950:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	fa92 f2a2 	rbit	r2, r2
 8003958:	603a      	str	r2, [r7, #0]
  return result;
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	fab2 f282 	clz	r2, r2
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	40d3      	lsrs	r3, r2
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003966:	5cd3      	ldrb	r3, [r2, r3]
 8003968:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	080062c8 	.word	0x080062c8

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003982:	f7ff ffcd 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003986:	4601      	mov	r1, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003990:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	fa92 f2a2 	rbit	r2, r2
 800399c:	603a      	str	r2, [r7, #0]
  return result;
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	40d3      	lsrs	r3, r2
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	080062c8 	.word	0x080062c8

080039c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b092      	sub	sp, #72	@ 0x48
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80d4 	beq.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10e      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	61d3      	str	r3, [r2, #28]
 80039fc:	4b48      	ldr	r3, [pc, #288]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b45      	ldr	r3, [pc, #276]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b42      	ldr	r3, [pc, #264]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a41      	ldr	r2, [pc, #260]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fd fe3b 	bl	80016a0 <HAL_GetTick>
 8003a2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fd fe37 	bl	80016a0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	@ 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e14b      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b38      	ldr	r3, [pc, #224]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4c:	4b34      	ldr	r3, [pc, #208]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8084 	beq.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d07c      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b26      	ldr	r3, [pc, #152]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	461a      	mov	r2, r3
 8003a96:	2301      	movs	r3, #1
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2300      	movs	r3, #0
 8003abc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003abe:	4a18      	ldr	r2, [pc, #96]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04b      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fd fde7 	bl	80016a0 <HAL_GetTick>
 8003ad2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fd fde3 	bl	80016a0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e0f5      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003aec:	2302      	movs	r3, #2
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af8:	2302      	movs	r3, #2
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	61fb      	str	r3, [r7, #28]
  return result;
 8003b04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d108      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b1a:	4b01      	ldr	r3, [pc, #4]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	e00d      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
 8003b28:	10908100 	.word	0x10908100
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	4b69      	ldr	r3, [pc, #420]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	613a      	str	r2, [r7, #16]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	60fa      	str	r2, [r7, #12]
  return result;
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0b7      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b66:	4b5e      	ldr	r3, [pc, #376]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	495b      	ldr	r1, [pc, #364]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b80:	4b57      	ldr	r3, [pc, #348]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4a56      	ldr	r2, [pc, #344]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b98:	4b51      	ldr	r3, [pc, #324]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	f023 0203 	bic.w	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	494e      	ldr	r1, [pc, #312]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f023 0210 	bic.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	4947      	ldr	r1, [pc, #284]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bd4:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	493f      	ldr	r1, [pc, #252]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	f023 0220 	bic.w	r2, r3, #32
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	4938      	ldr	r1, [pc, #224]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c10:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4930      	ldr	r1, [pc, #192]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4929      	ldr	r1, [pc, #164]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003c4c:	4b24      	ldr	r3, [pc, #144]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4921      	ldr	r1, [pc, #132]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	491a      	ldr	r1, [pc, #104]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	4912      	ldr	r1, [pc, #72]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	490b      	ldr	r1, [pc, #44]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003cc4:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	4903      	ldr	r1, [pc, #12]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3748      	adds	r7, #72	@ 0x48
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e049      	b.n	8003d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fc fff4 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 fce4 	bl	80046f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e03b      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	@ (8003e30 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x4e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x4e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <HAL_TIM_Base_Start_IT+0xa0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d115      	bne.n	8003e0e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	4b13      	ldr	r3, [pc, #76]	@ (8003e38 <HAL_TIM_Base_Start_IT+0xa4>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b06      	cmp	r3, #6
 8003df2:	d015      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x8c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfa:	d011      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	e008      	b.n	8003e20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e000      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40014000 	.word	0x40014000
 8003e38:	00010007 	.word	0x00010007

08003e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e049      	b.n	8003ee2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f841 	bl	8003eea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 fc38 	bl	80046f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_TIM_PWM_Start+0x24>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e03c      	b.n	8003f9e <HAL_TIM_PWM_Start+0x9e>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d109      	bne.n	8003f3e <HAL_TIM_PWM_Start+0x3e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e02f      	b.n	8003f9e <HAL_TIM_PWM_Start+0x9e>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d109      	bne.n	8003f58 <HAL_TIM_PWM_Start+0x58>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e022      	b.n	8003f9e <HAL_TIM_PWM_Start+0x9e>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d109      	bne.n	8003f72 <HAL_TIM_PWM_Start+0x72>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e015      	b.n	8003f9e <HAL_TIM_PWM_Start+0x9e>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d109      	bne.n	8003f8c <HAL_TIM_PWM_Start+0x8c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e008      	b.n	8003f9e <HAL_TIM_PWM_Start+0x9e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e083      	b.n	80040ae <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0xb6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb4:	e023      	b.n	8003ffe <HAL_TIM_PWM_Start+0xfe>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0xc6>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc4:	e01b      	b.n	8003ffe <HAL_TIM_PWM_Start+0xfe>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0xd6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd4:	e013      	b.n	8003ffe <HAL_TIM_PWM_Start+0xfe>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d104      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0xe6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fe4:	e00b      	b.n	8003ffe <HAL_TIM_PWM_Start+0xfe>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0xf6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff4:	e003      	b.n	8003ffe <HAL_TIM_PWM_Start+0xfe>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2201      	movs	r2, #1
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ff2c 	bl	8004e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a29      	ldr	r2, [pc, #164]	@ (80040b8 <HAL_TIM_PWM_Start+0x1b8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_TIM_PWM_Start+0x134>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a28      	ldr	r2, [pc, #160]	@ (80040bc <HAL_TIM_PWM_Start+0x1bc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_TIM_PWM_Start+0x134>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a26      	ldr	r2, [pc, #152]	@ (80040c0 <HAL_TIM_PWM_Start+0x1c0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_TIM_PWM_Start+0x134>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a25      	ldr	r2, [pc, #148]	@ (80040c4 <HAL_TIM_PWM_Start+0x1c4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_TIM_PWM_Start+0x138>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_TIM_PWM_Start+0x13a>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800404c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <HAL_TIM_PWM_Start+0x1b8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_TIM_PWM_Start+0x16c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004060:	d004      	beq.n	800406c <HAL_TIM_PWM_Start+0x16c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a15      	ldr	r2, [pc, #84]	@ (80040bc <HAL_TIM_PWM_Start+0x1bc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d115      	bne.n	8004098 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <HAL_TIM_PWM_Start+0x1c8>)
 8004074:	4013      	ands	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b06      	cmp	r3, #6
 800407c:	d015      	beq.n	80040aa <HAL_TIM_PWM_Start+0x1aa>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004084:	d011      	beq.n	80040aa <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004096:	e008      	b.n	80040aa <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e000      	b.n	80040ac <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800
 80040c8:	00010007 	.word	0x00010007

080040cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d020      	beq.n	8004130 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0202 	mvn.w	r2, #2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 facb 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fabd 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 face 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d020      	beq.n	800417c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01b      	beq.n	800417c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0204 	mvn.w	r2, #4
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 faa5 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa97 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 faa8 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d020      	beq.n	80041c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0208 	mvn.w	r2, #8
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2204      	movs	r2, #4
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa7f 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fa71 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fa82 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d020      	beq.n	8004214 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01b      	beq.n	8004214 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0210 	mvn.w	r2, #16
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2208      	movs	r2, #8
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa59 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa4b 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fa5c 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0201 	mvn.w	r2, #1
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa29 	bl	800468a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 ff12 	bl	8005080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 ff0a 	bl	8005094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fa1b 	bl	80046da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0220 	mvn.w	r2, #32
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fed2 	bl	800506c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e0ff      	b.n	80044ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b14      	cmp	r3, #20
 80042fa:	f200 80f0 	bhi.w	80044de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004359 	.word	0x08004359
 8004308:	080044df 	.word	0x080044df
 800430c:	080044df 	.word	0x080044df
 8004310:	080044df 	.word	0x080044df
 8004314:	08004399 	.word	0x08004399
 8004318:	080044df 	.word	0x080044df
 800431c:	080044df 	.word	0x080044df
 8004320:	080044df 	.word	0x080044df
 8004324:	080043db 	.word	0x080043db
 8004328:	080044df 	.word	0x080044df
 800432c:	080044df 	.word	0x080044df
 8004330:	080044df 	.word	0x080044df
 8004334:	0800441b 	.word	0x0800441b
 8004338:	080044df 	.word	0x080044df
 800433c:	080044df 	.word	0x080044df
 8004340:	080044df 	.word	0x080044df
 8004344:	0800445d 	.word	0x0800445d
 8004348:	080044df 	.word	0x080044df
 800434c:	080044df 	.word	0x080044df
 8004350:	080044df 	.word	0x080044df
 8004354:	0800449d 	.word	0x0800449d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fa40 	bl	80047e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0208 	orr.w	r2, r2, #8
 8004372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6999      	ldr	r1, [r3, #24]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	619a      	str	r2, [r3, #24]
      break;
 8004396:	e0a5      	b.n	80044e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 faa6 	bl	80048f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6999      	ldr	r1, [r3, #24]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	021a      	lsls	r2, r3, #8
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	619a      	str	r2, [r3, #24]
      break;
 80043d8:	e084      	b.n	80044e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fb05 	bl	80049f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0208 	orr.w	r2, r2, #8
 80043f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0204 	bic.w	r2, r2, #4
 8004404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69d9      	ldr	r1, [r3, #28]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	61da      	str	r2, [r3, #28]
      break;
 8004418:	e064      	b.n	80044e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fb63 	bl	8004aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	021a      	lsls	r2, r3, #8
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	61da      	str	r2, [r3, #28]
      break;
 800445a:	e043      	b.n	80044e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fba6 	bl	8004bb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0208 	orr.w	r2, r2, #8
 8004476:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800449a:	e023      	b.n	80044e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fbe4 	bl	8004c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	021a      	lsls	r2, r3, #8
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044dc:	e002      	b.n	80044e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
      break;
 80044e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop

080044f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIM_ConfigClockSource+0x1c>
 8004510:	2302      	movs	r3, #2
 8004512:	e0b6      	b.n	8004682 <HAL_TIM_ConfigClockSource+0x18a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004532:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004550:	d03e      	beq.n	80045d0 <HAL_TIM_ConfigClockSource+0xd8>
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004556:	f200 8087 	bhi.w	8004668 <HAL_TIM_ConfigClockSource+0x170>
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455e:	f000 8086 	beq.w	800466e <HAL_TIM_ConfigClockSource+0x176>
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	d87f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004568:	2b70      	cmp	r3, #112	@ 0x70
 800456a:	d01a      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xaa>
 800456c:	2b70      	cmp	r3, #112	@ 0x70
 800456e:	d87b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004570:	2b60      	cmp	r3, #96	@ 0x60
 8004572:	d050      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x11e>
 8004574:	2b60      	cmp	r3, #96	@ 0x60
 8004576:	d877      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004578:	2b50      	cmp	r3, #80	@ 0x50
 800457a:	d03c      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xfe>
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d873      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d058      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x13e>
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d86f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d064      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d86b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d060      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d867      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d05a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
 80045a0:	e062      	b.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	f000 fc37 	bl	8004e24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]
      break;
 80045ce:	e04f      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	f000 fc20 	bl	8004e24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f2:	609a      	str	r2, [r3, #8]
      break;
 80045f4:	e03c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004602:	461a      	mov	r2, r3
 8004604:	f000 fb94 	bl	8004d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2150      	movs	r1, #80	@ 0x50
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fbed 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004614:	e02c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004622:	461a      	mov	r2, r3
 8004624:	f000 fbb3 	bl	8004d8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2160      	movs	r1, #96	@ 0x60
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fbdd 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004634:	e01c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fb74 	bl	8004d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2140      	movs	r1, #64	@ 0x40
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fbcd 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004654:	e00c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 fbc4 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004666:	e003      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e000      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800466e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a34      	ldr	r2, [pc, #208]	@ (80047d4 <TIM_Base_SetConfig+0xe4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0x20>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470e:	d108      	bne.n	8004722 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2b      	ldr	r2, [pc, #172]	@ (80047d4 <TIM_Base_SetConfig+0xe4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <TIM_Base_SetConfig+0x5a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004730:	d00b      	beq.n	800474a <TIM_Base_SetConfig+0x5a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a28      	ldr	r2, [pc, #160]	@ (80047d8 <TIM_Base_SetConfig+0xe8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_Base_SetConfig+0x5a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <TIM_Base_SetConfig+0xec>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0x5a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <TIM_Base_SetConfig+0xf0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <TIM_Base_SetConfig+0xe4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00b      	beq.n	80047a0 <TIM_Base_SetConfig+0xb0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a13      	ldr	r2, [pc, #76]	@ (80047d8 <TIM_Base_SetConfig+0xe8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_Base_SetConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a12      	ldr	r2, [pc, #72]	@ (80047dc <TIM_Base_SetConfig+0xec>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0xb0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a11      	ldr	r2, [pc, #68]	@ (80047e0 <TIM_Base_SetConfig+0xf0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d103      	bne.n	80047a8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]
  }
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800

080047e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0201 	bic.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 0302 	bic.w	r3, r3, #2
 8004830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a28      	ldr	r2, [pc, #160]	@ (80048e0 <TIM_OC1_SetConfig+0xfc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00b      	beq.n	800485c <TIM_OC1_SetConfig+0x78>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a27      	ldr	r2, [pc, #156]	@ (80048e4 <TIM_OC1_SetConfig+0x100>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <TIM_OC1_SetConfig+0x78>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a26      	ldr	r2, [pc, #152]	@ (80048e8 <TIM_OC1_SetConfig+0x104>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_OC1_SetConfig+0x78>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a25      	ldr	r2, [pc, #148]	@ (80048ec <TIM_OC1_SetConfig+0x108>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10c      	bne.n	8004876 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0308 	bic.w	r3, r3, #8
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a19      	ldr	r2, [pc, #100]	@ (80048e0 <TIM_OC1_SetConfig+0xfc>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00b      	beq.n	8004896 <TIM_OC1_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a18      	ldr	r2, [pc, #96]	@ (80048e4 <TIM_OC1_SetConfig+0x100>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <TIM_OC1_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a17      	ldr	r2, [pc, #92]	@ (80048e8 <TIM_OC1_SetConfig+0x104>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_OC1_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <TIM_OC1_SetConfig+0x108>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d111      	bne.n	80048ba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800489c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	621a      	str	r2, [r3, #32]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800

080048f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f023 0210 	bic.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800492a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 0320 	bic.w	r3, r3, #32
 800493e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a24      	ldr	r2, [pc, #144]	@ (80049e0 <TIM_OC2_SetConfig+0xf0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10d      	bne.n	8004970 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800495a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800496e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a1b      	ldr	r2, [pc, #108]	@ (80049e0 <TIM_OC2_SetConfig+0xf0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_OC2_SetConfig+0xa0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a1a      	ldr	r2, [pc, #104]	@ (80049e4 <TIM_OC2_SetConfig+0xf4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_OC2_SetConfig+0xa0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a19      	ldr	r2, [pc, #100]	@ (80049e8 <TIM_OC2_SetConfig+0xf8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_OC2_SetConfig+0xa0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a18      	ldr	r2, [pc, #96]	@ (80049ec <TIM_OC2_SetConfig+0xfc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d113      	bne.n	80049b8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004996:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800499e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a23      	ldr	r2, [pc, #140]	@ (8004adc <TIM_OC3_SetConfig+0xec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10d      	bne.n	8004a6e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a6c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1a      	ldr	r2, [pc, #104]	@ (8004adc <TIM_OC3_SetConfig+0xec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_OC3_SetConfig+0x9e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a19      	ldr	r2, [pc, #100]	@ (8004ae0 <TIM_OC3_SetConfig+0xf0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <TIM_OC3_SetConfig+0x9e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <TIM_OC3_SetConfig+0xf4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_OC3_SetConfig+0x9e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a17      	ldr	r2, [pc, #92]	@ (8004ae8 <TIM_OC3_SetConfig+0xf8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d113      	bne.n	8004ab6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	621a      	str	r2, [r3, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800

08004aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	031b      	lsls	r3, r3, #12
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ba4 <TIM_OC4_SetConfig+0xb8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <TIM_OC4_SetConfig+0x7c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a15      	ldr	r2, [pc, #84]	@ (8004ba8 <TIM_OC4_SetConfig+0xbc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_OC4_SetConfig+0x7c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a14      	ldr	r2, [pc, #80]	@ (8004bac <TIM_OC4_SetConfig+0xc0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_OC4_SetConfig+0x7c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a13      	ldr	r2, [pc, #76]	@ (8004bb0 <TIM_OC4_SetConfig+0xc4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800

08004bb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a15      	ldr	r2, [pc, #84]	@ (8004c60 <TIM_OC5_SetConfig+0xac>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC5_SetConfig+0x72>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a14      	ldr	r2, [pc, #80]	@ (8004c64 <TIM_OC5_SetConfig+0xb0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC5_SetConfig+0x72>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a13      	ldr	r2, [pc, #76]	@ (8004c68 <TIM_OC5_SetConfig+0xb4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC5_SetConfig+0x72>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a12      	ldr	r2, [pc, #72]	@ (8004c6c <TIM_OC5_SetConfig+0xb8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d109      	bne.n	8004c3a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800

08004c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	051b      	lsls	r3, r3, #20
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a16      	ldr	r2, [pc, #88]	@ (8004d20 <TIM_OC6_SetConfig+0xb0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x74>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a15      	ldr	r2, [pc, #84]	@ (8004d24 <TIM_OC6_SetConfig+0xb4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x74>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	@ (8004d28 <TIM_OC6_SetConfig+0xb8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC6_SetConfig+0x74>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a13      	ldr	r2, [pc, #76]	@ (8004d2c <TIM_OC6_SetConfig+0xbc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d109      	bne.n	8004cf8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	029b      	lsls	r3, r3, #10
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800

08004d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f023 0201 	bic.w	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 030a 	bic.w	r3, r3, #10
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 0210 	bic.w	r2, r3, #16
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	031b      	lsls	r3, r3, #12
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f043 0307 	orr.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	021a      	lsls	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2201      	movs	r2, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	401a      	ands	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e04f      	b.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d108      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ef8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a14      	ldr	r2, [pc, #80]	@ (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f30:	d004      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a10      	ldr	r2, [pc, #64]	@ (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10c      	bne.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40014000 	.word	0x40014000

08004f7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e060      	b.n	800505a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a14      	ldr	r2, [pc, #80]	@ (8005068 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d115      	bne.n	8005048 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	051b      	lsls	r3, r3, #20
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00

0800506c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e040      	b.n	800513c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb fe84 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2224      	movs	r2, #36	@ 0x24
 80050d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9e8 	bl	80054c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f8af 	bl	8005258 <UART_SetConfig>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e01b      	b.n	800513c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa67 	bl	8005608 <UART_CheckIdleState>
 800513a:	4603      	mov	r3, r0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	@ 0x28
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005158:	2b20      	cmp	r3, #32
 800515a:	d177      	bne.n	800524c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_UART_Transmit+0x24>
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e070      	b.n	800524e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2221      	movs	r2, #33	@ 0x21
 8005178:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517a:	f7fc fa91 	bl	80016a0 <HAL_GetTick>
 800517e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005198:	d108      	bne.n	80051ac <HAL_UART_Transmit+0x68>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e003      	b.n	80051b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051b4:	e02f      	b.n	8005216 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fac9 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e03b      	b.n	800524e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	881a      	ldrh	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e8:	b292      	uxth	r2, r2
 80051ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	3302      	adds	r3, #2
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e007      	b.n	8005204 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3301      	adds	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1c9      	bne.n	80051b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	2140      	movs	r1, #64	@ 0x40
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fa93 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e005      	b.n	800524e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b8a      	ldr	r3, [pc, #552]	@ (80054ac <UART_SetConfig+0x254>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6979      	ldr	r1, [r7, #20]
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a78      	ldr	r2, [pc, #480]	@ (80054b0 <UART_SetConfig+0x258>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d120      	bne.n	8005316 <UART_SetConfig+0xbe>
 80052d4:	4b77      	ldr	r3, [pc, #476]	@ (80054b4 <UART_SetConfig+0x25c>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d817      	bhi.n	8005310 <UART_SetConfig+0xb8>
 80052e0:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <UART_SetConfig+0x90>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	08005305 	.word	0x08005305
 80052f0:	0800530b 	.word	0x0800530b
 80052f4:	080052ff 	.word	0x080052ff
 80052f8:	2300      	movs	r3, #0
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e01d      	b.n	800533a <UART_SetConfig+0xe2>
 80052fe:	2302      	movs	r3, #2
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e01a      	b.n	800533a <UART_SetConfig+0xe2>
 8005304:	2304      	movs	r3, #4
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e017      	b.n	800533a <UART_SetConfig+0xe2>
 800530a:	2308      	movs	r3, #8
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e014      	b.n	800533a <UART_SetConfig+0xe2>
 8005310:	2310      	movs	r3, #16
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e011      	b.n	800533a <UART_SetConfig+0xe2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a67      	ldr	r2, [pc, #412]	@ (80054b8 <UART_SetConfig+0x260>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d102      	bne.n	8005326 <UART_SetConfig+0xce>
 8005320:	2300      	movs	r3, #0
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e009      	b.n	800533a <UART_SetConfig+0xe2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a64      	ldr	r2, [pc, #400]	@ (80054bc <UART_SetConfig+0x264>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d102      	bne.n	8005336 <UART_SetConfig+0xde>
 8005330:	2300      	movs	r3, #0
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e001      	b.n	800533a <UART_SetConfig+0xe2>
 8005336:	2310      	movs	r3, #16
 8005338:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005342:	d15a      	bne.n	80053fa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005344:	7ffb      	ldrb	r3, [r7, #31]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d827      	bhi.n	800539a <UART_SetConfig+0x142>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0xf8>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005375 	.word	0x08005375
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005385 	.word	0x08005385
 800535c:	0800539b 	.word	0x0800539b
 8005360:	0800538b 	.word	0x0800538b
 8005364:	0800539b 	.word	0x0800539b
 8005368:	0800539b 	.word	0x0800539b
 800536c:	0800539b 	.word	0x0800539b
 8005370:	08005393 	.word	0x08005393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fe fae0 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005378:	61b8      	str	r0, [r7, #24]
        break;
 800537a:	e013      	b.n	80053a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fe fafe 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8005380:	61b8      	str	r0, [r7, #24]
        break;
 8005382:	e00f      	b.n	80053a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005384:	4b4e      	ldr	r3, [pc, #312]	@ (80054c0 <UART_SetConfig+0x268>)
 8005386:	61bb      	str	r3, [r7, #24]
        break;
 8005388:	e00c      	b.n	80053a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538a:	f7fe fa75 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 800538e:	61b8      	str	r0, [r7, #24]
        break;
 8005390:	e008      	b.n	80053a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005396:	61bb      	str	r3, [r7, #24]
        break;
 8005398:	e004      	b.n	80053a4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	77bb      	strb	r3, [r7, #30]
        break;
 80053a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d074      	beq.n	8005494 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	005a      	lsls	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80053be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	d916      	bls.n	80053f4 <UART_SetConfig+0x19c>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053cc:	d212      	bcs.n	80053f4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f023 030f 	bic.w	r3, r3, #15
 80053d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	89fa      	ldrh	r2, [r7, #14]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	e04f      	b.n	8005494 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	77bb      	strb	r3, [r7, #30]
 80053f8:	e04c      	b.n	8005494 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053fa:	7ffb      	ldrb	r3, [r7, #31]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d828      	bhi.n	8005452 <UART_SetConfig+0x1fa>
 8005400:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <UART_SetConfig+0x1b0>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005435 	.word	0x08005435
 8005410:	0800543d 	.word	0x0800543d
 8005414:	08005453 	.word	0x08005453
 8005418:	08005443 	.word	0x08005443
 800541c:	08005453 	.word	0x08005453
 8005420:	08005453 	.word	0x08005453
 8005424:	08005453 	.word	0x08005453
 8005428:	0800544b 	.word	0x0800544b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800542c:	f7fe fa84 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005430:	61b8      	str	r0, [r7, #24]
        break;
 8005432:	e013      	b.n	800545c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005434:	f7fe faa2 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8005438:	61b8      	str	r0, [r7, #24]
        break;
 800543a:	e00f      	b.n	800545c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <UART_SetConfig+0x268>)
 800543e:	61bb      	str	r3, [r7, #24]
        break;
 8005440:	e00c      	b.n	800545c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005442:	f7fe fa19 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8005446:	61b8      	str	r0, [r7, #24]
        break;
 8005448:	e008      	b.n	800545c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800544e:	61bb      	str	r3, [r7, #24]
        break;
 8005450:	e004      	b.n	800545c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	77bb      	strb	r3, [r7, #30]
        break;
 800545a:	bf00      	nop
    }

    if (pclk != 0U)
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	085a      	lsrs	r2, r3, #1
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	441a      	add	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b0f      	cmp	r3, #15
 800547a:	d909      	bls.n	8005490 <UART_SetConfig+0x238>
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005482:	d205      	bcs.n	8005490 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	e001      	b.n	8005494 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	efff69f3 	.word	0xefff69f3
 80054b0:	40013800 	.word	0x40013800
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40004400 	.word	0x40004400
 80054bc:	40004800 	.word	0x40004800
 80054c0:	007a1200 	.word	0x007a1200

080054c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c2:	d10a      	bne.n	80055da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b098      	sub	sp, #96	@ 0x60
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005618:	f7fc f842 	bl	80016a0 <HAL_GetTick>
 800561c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b08      	cmp	r3, #8
 800562a:	d12e      	bne.n	800568a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005634:	2200      	movs	r2, #0
 8005636:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f88c 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d021      	beq.n	800568a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565a:	653b      	str	r3, [r7, #80]	@ 0x50
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005664:	647b      	str	r3, [r7, #68]	@ 0x44
 8005666:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800566a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e6      	bne.n	8005646 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e062      	b.n	8005750 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b04      	cmp	r3, #4
 8005696:	d149      	bne.n	800572c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f856 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d03c      	beq.n	800572c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	623b      	str	r3, [r7, #32]
   return(result);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005704:	61fa      	str	r2, [r7, #28]
 8005706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	617b      	str	r3, [r7, #20]
   return(result);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e5      	bne.n	80056e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e011      	b.n	8005750 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3758      	adds	r7, #88	@ 0x58
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	e04f      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d04b      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fb ff95 	bl	80016a0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <UART_WaitOnFlagUntilTimeout+0x30>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e04e      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d037      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b80      	cmp	r3, #128	@ 0x80
 800579e:	d034      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b40      	cmp	r3, #64	@ 0x40
 80057a4:	d031      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d110      	bne.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2208      	movs	r2, #8
 80057ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f838 	bl	8005832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2208      	movs	r2, #8
 80057c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e029      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057e4:	d111      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f81e 	bl	8005832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e00f      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4013      	ands	r3, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	bf0c      	ite	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	2300      	movne	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	429a      	cmp	r2, r3
 8005826:	d0a0      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005832:	b480      	push	{r7}
 8005834:	b095      	sub	sp, #84	@ 0x54
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005858:	643b      	str	r3, [r7, #64]	@ 0x40
 800585a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800585e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	61fb      	str	r3, [r7, #28]
   return(result);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d118      	bne.n	80058da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f023 0310 	bic.w	r3, r3, #16
 80058bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6979      	ldr	r1, [r7, #20]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	613b      	str	r3, [r7, #16]
   return(result);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e6      	bne.n	80058a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058ee:	bf00      	nop
 80058f0:	3754      	adds	r7, #84	@ 0x54
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <calloc>:
 80058fc:	4b02      	ldr	r3, [pc, #8]	@ (8005908 <calloc+0xc>)
 80058fe:	460a      	mov	r2, r1
 8005900:	4601      	mov	r1, r0
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	f000 b802 	b.w	800590c <_calloc_r>
 8005908:	2000001c 	.word	0x2000001c

0800590c <_calloc_r>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	fba1 5402 	umull	r5, r4, r1, r2
 8005912:	b93c      	cbnz	r4, 8005924 <_calloc_r+0x18>
 8005914:	4629      	mov	r1, r5
 8005916:	f000 f837 	bl	8005988 <_malloc_r>
 800591a:	4606      	mov	r6, r0
 800591c:	b928      	cbnz	r0, 800592a <_calloc_r+0x1e>
 800591e:	2600      	movs	r6, #0
 8005920:	4630      	mov	r0, r6
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	220c      	movs	r2, #12
 8005926:	6002      	str	r2, [r0, #0]
 8005928:	e7f9      	b.n	800591e <_calloc_r+0x12>
 800592a:	462a      	mov	r2, r5
 800592c:	4621      	mov	r1, r4
 800592e:	f000 f8d7 	bl	8005ae0 <memset>
 8005932:	e7f5      	b.n	8005920 <_calloc_r+0x14>

08005934 <malloc>:
 8005934:	4b02      	ldr	r3, [pc, #8]	@ (8005940 <malloc+0xc>)
 8005936:	4601      	mov	r1, r0
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	f000 b825 	b.w	8005988 <_malloc_r>
 800593e:	bf00      	nop
 8005940:	2000001c 	.word	0x2000001c

08005944 <sbrk_aligned>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4e0f      	ldr	r6, [pc, #60]	@ (8005984 <sbrk_aligned+0x40>)
 8005948:	460c      	mov	r4, r1
 800594a:	6831      	ldr	r1, [r6, #0]
 800594c:	4605      	mov	r5, r0
 800594e:	b911      	cbnz	r1, 8005956 <sbrk_aligned+0x12>
 8005950:	f000 f8ce 	bl	8005af0 <_sbrk_r>
 8005954:	6030      	str	r0, [r6, #0]
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 f8c9 	bl	8005af0 <_sbrk_r>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d103      	bne.n	800596a <sbrk_aligned+0x26>
 8005962:	f04f 34ff 	mov.w	r4, #4294967295
 8005966:	4620      	mov	r0, r4
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	1cc4      	adds	r4, r0, #3
 800596c:	f024 0403 	bic.w	r4, r4, #3
 8005970:	42a0      	cmp	r0, r4
 8005972:	d0f8      	beq.n	8005966 <sbrk_aligned+0x22>
 8005974:	1a21      	subs	r1, r4, r0
 8005976:	4628      	mov	r0, r5
 8005978:	f000 f8ba 	bl	8005af0 <_sbrk_r>
 800597c:	3001      	adds	r0, #1
 800597e:	d1f2      	bne.n	8005966 <sbrk_aligned+0x22>
 8005980:	e7ef      	b.n	8005962 <sbrk_aligned+0x1e>
 8005982:	bf00      	nop
 8005984:	20000224 	.word	0x20000224

08005988 <_malloc_r>:
 8005988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800598c:	1ccd      	adds	r5, r1, #3
 800598e:	f025 0503 	bic.w	r5, r5, #3
 8005992:	3508      	adds	r5, #8
 8005994:	2d0c      	cmp	r5, #12
 8005996:	bf38      	it	cc
 8005998:	250c      	movcc	r5, #12
 800599a:	2d00      	cmp	r5, #0
 800599c:	4606      	mov	r6, r0
 800599e:	db01      	blt.n	80059a4 <_malloc_r+0x1c>
 80059a0:	42a9      	cmp	r1, r5
 80059a2:	d904      	bls.n	80059ae <_malloc_r+0x26>
 80059a4:	230c      	movs	r3, #12
 80059a6:	6033      	str	r3, [r6, #0]
 80059a8:	2000      	movs	r0, #0
 80059aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a84 <_malloc_r+0xfc>
 80059b2:	f000 f869 	bl	8005a88 <__malloc_lock>
 80059b6:	f8d8 3000 	ldr.w	r3, [r8]
 80059ba:	461c      	mov	r4, r3
 80059bc:	bb44      	cbnz	r4, 8005a10 <_malloc_r+0x88>
 80059be:	4629      	mov	r1, r5
 80059c0:	4630      	mov	r0, r6
 80059c2:	f7ff ffbf 	bl	8005944 <sbrk_aligned>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	4604      	mov	r4, r0
 80059ca:	d158      	bne.n	8005a7e <_malloc_r+0xf6>
 80059cc:	f8d8 4000 	ldr.w	r4, [r8]
 80059d0:	4627      	mov	r7, r4
 80059d2:	2f00      	cmp	r7, #0
 80059d4:	d143      	bne.n	8005a5e <_malloc_r+0xd6>
 80059d6:	2c00      	cmp	r4, #0
 80059d8:	d04b      	beq.n	8005a72 <_malloc_r+0xea>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	4639      	mov	r1, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	eb04 0903 	add.w	r9, r4, r3
 80059e4:	f000 f884 	bl	8005af0 <_sbrk_r>
 80059e8:	4581      	cmp	r9, r0
 80059ea:	d142      	bne.n	8005a72 <_malloc_r+0xea>
 80059ec:	6821      	ldr	r1, [r4, #0]
 80059ee:	1a6d      	subs	r5, r5, r1
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7ff ffa6 	bl	8005944 <sbrk_aligned>
 80059f8:	3001      	adds	r0, #1
 80059fa:	d03a      	beq.n	8005a72 <_malloc_r+0xea>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	442b      	add	r3, r5
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	f8d8 3000 	ldr.w	r3, [r8]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	bb62      	cbnz	r2, 8005a64 <_malloc_r+0xdc>
 8005a0a:	f8c8 7000 	str.w	r7, [r8]
 8005a0e:	e00f      	b.n	8005a30 <_malloc_r+0xa8>
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	1b52      	subs	r2, r2, r5
 8005a14:	d420      	bmi.n	8005a58 <_malloc_r+0xd0>
 8005a16:	2a0b      	cmp	r2, #11
 8005a18:	d917      	bls.n	8005a4a <_malloc_r+0xc2>
 8005a1a:	1961      	adds	r1, r4, r5
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	6025      	str	r5, [r4, #0]
 8005a20:	bf18      	it	ne
 8005a22:	6059      	strne	r1, [r3, #4]
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	bf08      	it	eq
 8005a28:	f8c8 1000 	streq.w	r1, [r8]
 8005a2c:	5162      	str	r2, [r4, r5]
 8005a2e:	604b      	str	r3, [r1, #4]
 8005a30:	4630      	mov	r0, r6
 8005a32:	f000 f82f 	bl	8005a94 <__malloc_unlock>
 8005a36:	f104 000b 	add.w	r0, r4, #11
 8005a3a:	1d23      	adds	r3, r4, #4
 8005a3c:	f020 0007 	bic.w	r0, r0, #7
 8005a40:	1ac2      	subs	r2, r0, r3
 8005a42:	bf1c      	itt	ne
 8005a44:	1a1b      	subne	r3, r3, r0
 8005a46:	50a3      	strne	r3, [r4, r2]
 8005a48:	e7af      	b.n	80059aa <_malloc_r+0x22>
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	bf0c      	ite	eq
 8005a50:	f8c8 2000 	streq.w	r2, [r8]
 8005a54:	605a      	strne	r2, [r3, #4]
 8005a56:	e7eb      	b.n	8005a30 <_malloc_r+0xa8>
 8005a58:	4623      	mov	r3, r4
 8005a5a:	6864      	ldr	r4, [r4, #4]
 8005a5c:	e7ae      	b.n	80059bc <_malloc_r+0x34>
 8005a5e:	463c      	mov	r4, r7
 8005a60:	687f      	ldr	r7, [r7, #4]
 8005a62:	e7b6      	b.n	80059d2 <_malloc_r+0x4a>
 8005a64:	461a      	mov	r2, r3
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	42a3      	cmp	r3, r4
 8005a6a:	d1fb      	bne.n	8005a64 <_malloc_r+0xdc>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6053      	str	r3, [r2, #4]
 8005a70:	e7de      	b.n	8005a30 <_malloc_r+0xa8>
 8005a72:	230c      	movs	r3, #12
 8005a74:	6033      	str	r3, [r6, #0]
 8005a76:	4630      	mov	r0, r6
 8005a78:	f000 f80c 	bl	8005a94 <__malloc_unlock>
 8005a7c:	e794      	b.n	80059a8 <_malloc_r+0x20>
 8005a7e:	6005      	str	r5, [r0, #0]
 8005a80:	e7d6      	b.n	8005a30 <_malloc_r+0xa8>
 8005a82:	bf00      	nop
 8005a84:	20000228 	.word	0x20000228

08005a88 <__malloc_lock>:
 8005a88:	4801      	ldr	r0, [pc, #4]	@ (8005a90 <__malloc_lock+0x8>)
 8005a8a:	f000 b86b 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 8005a8e:	bf00      	nop
 8005a90:	20000368 	.word	0x20000368

08005a94 <__malloc_unlock>:
 8005a94:	4801      	ldr	r0, [pc, #4]	@ (8005a9c <__malloc_unlock+0x8>)
 8005a96:	f000 b866 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	20000368 	.word	0x20000368

08005aa0 <siprintf>:
 8005aa0:	b40e      	push	{r1, r2, r3}
 8005aa2:	b500      	push	{lr}
 8005aa4:	b09c      	sub	sp, #112	@ 0x70
 8005aa6:	ab1d      	add	r3, sp, #116	@ 0x74
 8005aa8:	9002      	str	r0, [sp, #8]
 8005aaa:	9006      	str	r0, [sp, #24]
 8005aac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ab0:	4809      	ldr	r0, [pc, #36]	@ (8005ad8 <siprintf+0x38>)
 8005ab2:	9107      	str	r1, [sp, #28]
 8005ab4:	9104      	str	r1, [sp, #16]
 8005ab6:	4909      	ldr	r1, [pc, #36]	@ (8005adc <siprintf+0x3c>)
 8005ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	a902      	add	r1, sp, #8
 8005ac4:	f000 f8f6 	bl	8005cb4 <_svfiprintf_r>
 8005ac8:	9b02      	ldr	r3, [sp, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	b01c      	add	sp, #112	@ 0x70
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	4770      	bx	lr
 8005ad8:	2000001c 	.word	0x2000001c
 8005adc:	ffff0208 	.word	0xffff0208

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <_sbrk_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d06      	ldr	r5, [pc, #24]	@ (8005b0c <_sbrk_r+0x1c>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fb fbaa 	bl	8001254 <_sbrk>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_sbrk_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_sbrk_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20000364 	.word	0x20000364

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	2000001c 	.word	0x2000001c

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	@ (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 fba8 	bl	8006284 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	0800632c 	.word	0x0800632c
 8005b58:	0800632c 	.word	0x0800632c
 8005b5c:	0800632c 	.word	0x0800632c
 8005b60:	08006330 	.word	0x08006330

08005b64 <__retarget_lock_acquire_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_release_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <_free_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d041      	beq.n	8005bf4 <_free_r+0x8c>
 8005b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b74:	1f0c      	subs	r4, r1, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfb8      	it	lt
 8005b7a:	18e4      	addlt	r4, r4, r3
 8005b7c:	f7ff ff84 	bl	8005a88 <__malloc_lock>
 8005b80:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf8 <_free_r+0x90>)
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	b933      	cbnz	r3, 8005b94 <_free_r+0x2c>
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b90:	f7ff bf80 	b.w	8005a94 <__malloc_unlock>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d908      	bls.n	8005baa <_free_r+0x42>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	1821      	adds	r1, r4, r0
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1809      	addeq	r1, r1, r0
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	e7ed      	b.n	8005b86 <_free_r+0x1e>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x4c>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x42>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1850      	adds	r0, r2, r1
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x6c>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	4401      	add	r1, r0
 8005bc0:	1850      	adds	r0, r2, r1
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1e0      	bne.n	8005b8a <_free_r+0x22>
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	4408      	add	r0, r1
 8005bd0:	6010      	str	r0, [r2, #0]
 8005bd2:	e7da      	b.n	8005b8a <_free_r+0x22>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x74>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	e7d6      	b.n	8005b8a <_free_r+0x22>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	1821      	adds	r1, r4, r0
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf04      	itt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	bf04      	itt	eq
 8005bec:	1809      	addeq	r1, r1, r0
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	6054      	str	r4, [r2, #4]
 8005bf2:	e7ca      	b.n	8005b8a <_free_r+0x22>
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000228 	.word	0x20000228

08005bfc <__ssputs_r>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	688e      	ldr	r6, [r1, #8]
 8005c02:	461f      	mov	r7, r3
 8005c04:	42be      	cmp	r6, r7
 8005c06:	680b      	ldr	r3, [r1, #0]
 8005c08:	4682      	mov	sl, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4690      	mov	r8, r2
 8005c0e:	d82d      	bhi.n	8005c6c <__ssputs_r+0x70>
 8005c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c18:	d026      	beq.n	8005c68 <__ssputs_r+0x6c>
 8005c1a:	6965      	ldr	r5, [r4, #20]
 8005c1c:	6909      	ldr	r1, [r1, #16]
 8005c1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c22:	eba3 0901 	sub.w	r9, r3, r1
 8005c26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c2a:	1c7b      	adds	r3, r7, #1
 8005c2c:	444b      	add	r3, r9
 8005c2e:	106d      	asrs	r5, r5, #1
 8005c30:	429d      	cmp	r5, r3
 8005c32:	bf38      	it	cc
 8005c34:	461d      	movcc	r5, r3
 8005c36:	0553      	lsls	r3, r2, #21
 8005c38:	d527      	bpl.n	8005c8a <__ssputs_r+0x8e>
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	f7ff fea4 	bl	8005988 <_malloc_r>
 8005c40:	4606      	mov	r6, r0
 8005c42:	b360      	cbz	r0, 8005c9e <__ssputs_r+0xa2>
 8005c44:	6921      	ldr	r1, [r4, #16]
 8005c46:	464a      	mov	r2, r9
 8005c48:	f000 fad8 	bl	80061fc <memcpy>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	6126      	str	r6, [r4, #16]
 8005c5a:	6165      	str	r5, [r4, #20]
 8005c5c:	444e      	add	r6, r9
 8005c5e:	eba5 0509 	sub.w	r5, r5, r9
 8005c62:	6026      	str	r6, [r4, #0]
 8005c64:	60a5      	str	r5, [r4, #8]
 8005c66:	463e      	mov	r6, r7
 8005c68:	42be      	cmp	r6, r7
 8005c6a:	d900      	bls.n	8005c6e <__ssputs_r+0x72>
 8005c6c:	463e      	mov	r6, r7
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	4632      	mov	r2, r6
 8005c72:	4641      	mov	r1, r8
 8005c74:	f000 faa8 	bl	80061c8 <memmove>
 8005c78:	68a3      	ldr	r3, [r4, #8]
 8005c7a:	1b9b      	subs	r3, r3, r6
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	4433      	add	r3, r6
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	2000      	movs	r0, #0
 8005c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8a:	462a      	mov	r2, r5
 8005c8c:	f000 fac4 	bl	8006218 <_realloc_r>
 8005c90:	4606      	mov	r6, r0
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d1e0      	bne.n	8005c58 <__ssputs_r+0x5c>
 8005c96:	6921      	ldr	r1, [r4, #16]
 8005c98:	4650      	mov	r0, sl
 8005c9a:	f7ff ff65 	bl	8005b68 <_free_r>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	f8ca 3000 	str.w	r3, [sl]
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e7e9      	b.n	8005c86 <__ssputs_r+0x8a>
	...

08005cb4 <_svfiprintf_r>:
 8005cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	4698      	mov	r8, r3
 8005cba:	898b      	ldrh	r3, [r1, #12]
 8005cbc:	061b      	lsls	r3, r3, #24
 8005cbe:	b09d      	sub	sp, #116	@ 0x74
 8005cc0:	4607      	mov	r7, r0
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	d510      	bpl.n	8005cea <_svfiprintf_r+0x36>
 8005cc8:	690b      	ldr	r3, [r1, #16]
 8005cca:	b973      	cbnz	r3, 8005cea <_svfiprintf_r+0x36>
 8005ccc:	2140      	movs	r1, #64	@ 0x40
 8005cce:	f7ff fe5b 	bl	8005988 <_malloc_r>
 8005cd2:	6028      	str	r0, [r5, #0]
 8005cd4:	6128      	str	r0, [r5, #16]
 8005cd6:	b930      	cbnz	r0, 8005ce6 <_svfiprintf_r+0x32>
 8005cd8:	230c      	movs	r3, #12
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	b01d      	add	sp, #116	@ 0x74
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce6:	2340      	movs	r3, #64	@ 0x40
 8005ce8:	616b      	str	r3, [r5, #20]
 8005cea:	2300      	movs	r3, #0
 8005cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cee:	2320      	movs	r3, #32
 8005cf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cf8:	2330      	movs	r3, #48	@ 0x30
 8005cfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e98 <_svfiprintf_r+0x1e4>
 8005cfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d02:	f04f 0901 	mov.w	r9, #1
 8005d06:	4623      	mov	r3, r4
 8005d08:	469a      	mov	sl, r3
 8005d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d0e:	b10a      	cbz	r2, 8005d14 <_svfiprintf_r+0x60>
 8005d10:	2a25      	cmp	r2, #37	@ 0x25
 8005d12:	d1f9      	bne.n	8005d08 <_svfiprintf_r+0x54>
 8005d14:	ebba 0b04 	subs.w	fp, sl, r4
 8005d18:	d00b      	beq.n	8005d32 <_svfiprintf_r+0x7e>
 8005d1a:	465b      	mov	r3, fp
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4629      	mov	r1, r5
 8005d20:	4638      	mov	r0, r7
 8005d22:	f7ff ff6b 	bl	8005bfc <__ssputs_r>
 8005d26:	3001      	adds	r0, #1
 8005d28:	f000 80a7 	beq.w	8005e7a <_svfiprintf_r+0x1c6>
 8005d2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d2e:	445a      	add	r2, fp
 8005d30:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d32:	f89a 3000 	ldrb.w	r3, [sl]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 809f 	beq.w	8005e7a <_svfiprintf_r+0x1c6>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d46:	f10a 0a01 	add.w	sl, sl, #1
 8005d4a:	9304      	str	r3, [sp, #16]
 8005d4c:	9307      	str	r3, [sp, #28]
 8005d4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d52:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d54:	4654      	mov	r4, sl
 8005d56:	2205      	movs	r2, #5
 8005d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5c:	484e      	ldr	r0, [pc, #312]	@ (8005e98 <_svfiprintf_r+0x1e4>)
 8005d5e:	f7fa fa37 	bl	80001d0 <memchr>
 8005d62:	9a04      	ldr	r2, [sp, #16]
 8005d64:	b9d8      	cbnz	r0, 8005d9e <_svfiprintf_r+0xea>
 8005d66:	06d0      	lsls	r0, r2, #27
 8005d68:	bf44      	itt	mi
 8005d6a:	2320      	movmi	r3, #32
 8005d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d70:	0711      	lsls	r1, r2, #28
 8005d72:	bf44      	itt	mi
 8005d74:	232b      	movmi	r3, #43	@ 0x2b
 8005d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d80:	d015      	beq.n	8005dae <_svfiprintf_r+0xfa>
 8005d82:	9a07      	ldr	r2, [sp, #28]
 8005d84:	4654      	mov	r4, sl
 8005d86:	2000      	movs	r0, #0
 8005d88:	f04f 0c0a 	mov.w	ip, #10
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d92:	3b30      	subs	r3, #48	@ 0x30
 8005d94:	2b09      	cmp	r3, #9
 8005d96:	d94b      	bls.n	8005e30 <_svfiprintf_r+0x17c>
 8005d98:	b1b0      	cbz	r0, 8005dc8 <_svfiprintf_r+0x114>
 8005d9a:	9207      	str	r2, [sp, #28]
 8005d9c:	e014      	b.n	8005dc8 <_svfiprintf_r+0x114>
 8005d9e:	eba0 0308 	sub.w	r3, r0, r8
 8005da2:	fa09 f303 	lsl.w	r3, r9, r3
 8005da6:	4313      	orrs	r3, r2
 8005da8:	9304      	str	r3, [sp, #16]
 8005daa:	46a2      	mov	sl, r4
 8005dac:	e7d2      	b.n	8005d54 <_svfiprintf_r+0xa0>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	1d19      	adds	r1, r3, #4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	9103      	str	r1, [sp, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfbb      	ittet	lt
 8005dba:	425b      	neglt	r3, r3
 8005dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8005dc0:	9307      	strge	r3, [sp, #28]
 8005dc2:	9307      	strlt	r3, [sp, #28]
 8005dc4:	bfb8      	it	lt
 8005dc6:	9204      	strlt	r2, [sp, #16]
 8005dc8:	7823      	ldrb	r3, [r4, #0]
 8005dca:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dcc:	d10a      	bne.n	8005de4 <_svfiprintf_r+0x130>
 8005dce:	7863      	ldrb	r3, [r4, #1]
 8005dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dd2:	d132      	bne.n	8005e3a <_svfiprintf_r+0x186>
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	1d1a      	adds	r2, r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	9203      	str	r2, [sp, #12]
 8005ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005de0:	3402      	adds	r4, #2
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ea8 <_svfiprintf_r+0x1f4>
 8005de8:	7821      	ldrb	r1, [r4, #0]
 8005dea:	2203      	movs	r2, #3
 8005dec:	4650      	mov	r0, sl
 8005dee:	f7fa f9ef 	bl	80001d0 <memchr>
 8005df2:	b138      	cbz	r0, 8005e04 <_svfiprintf_r+0x150>
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	eba0 000a 	sub.w	r0, r0, sl
 8005dfa:	2240      	movs	r2, #64	@ 0x40
 8005dfc:	4082      	lsls	r2, r0
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	3401      	adds	r4, #1
 8005e02:	9304      	str	r3, [sp, #16]
 8005e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e08:	4824      	ldr	r0, [pc, #144]	@ (8005e9c <_svfiprintf_r+0x1e8>)
 8005e0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e0e:	2206      	movs	r2, #6
 8005e10:	f7fa f9de 	bl	80001d0 <memchr>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d036      	beq.n	8005e86 <_svfiprintf_r+0x1d2>
 8005e18:	4b21      	ldr	r3, [pc, #132]	@ (8005ea0 <_svfiprintf_r+0x1ec>)
 8005e1a:	bb1b      	cbnz	r3, 8005e64 <_svfiprintf_r+0x1b0>
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	3307      	adds	r3, #7
 8005e20:	f023 0307 	bic.w	r3, r3, #7
 8005e24:	3308      	adds	r3, #8
 8005e26:	9303      	str	r3, [sp, #12]
 8005e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e2a:	4433      	add	r3, r6
 8005e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e2e:	e76a      	b.n	8005d06 <_svfiprintf_r+0x52>
 8005e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e34:	460c      	mov	r4, r1
 8005e36:	2001      	movs	r0, #1
 8005e38:	e7a8      	b.n	8005d8c <_svfiprintf_r+0xd8>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	3401      	adds	r4, #1
 8005e3e:	9305      	str	r3, [sp, #20]
 8005e40:	4619      	mov	r1, r3
 8005e42:	f04f 0c0a 	mov.w	ip, #10
 8005e46:	4620      	mov	r0, r4
 8005e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e4c:	3a30      	subs	r2, #48	@ 0x30
 8005e4e:	2a09      	cmp	r2, #9
 8005e50:	d903      	bls.n	8005e5a <_svfiprintf_r+0x1a6>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0c6      	beq.n	8005de4 <_svfiprintf_r+0x130>
 8005e56:	9105      	str	r1, [sp, #20]
 8005e58:	e7c4      	b.n	8005de4 <_svfiprintf_r+0x130>
 8005e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e5e:	4604      	mov	r4, r0
 8005e60:	2301      	movs	r3, #1
 8005e62:	e7f0      	b.n	8005e46 <_svfiprintf_r+0x192>
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	462a      	mov	r2, r5
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea4 <_svfiprintf_r+0x1f0>)
 8005e6c:	a904      	add	r1, sp, #16
 8005e6e:	4638      	mov	r0, r7
 8005e70:	f3af 8000 	nop.w
 8005e74:	1c42      	adds	r2, r0, #1
 8005e76:	4606      	mov	r6, r0
 8005e78:	d1d6      	bne.n	8005e28 <_svfiprintf_r+0x174>
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	065b      	lsls	r3, r3, #25
 8005e7e:	f53f af2d 	bmi.w	8005cdc <_svfiprintf_r+0x28>
 8005e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e84:	e72c      	b.n	8005ce0 <_svfiprintf_r+0x2c>
 8005e86:	ab03      	add	r3, sp, #12
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ea4 <_svfiprintf_r+0x1f0>)
 8005e8e:	a904      	add	r1, sp, #16
 8005e90:	4638      	mov	r0, r7
 8005e92:	f000 f879 	bl	8005f88 <_printf_i>
 8005e96:	e7ed      	b.n	8005e74 <_svfiprintf_r+0x1c0>
 8005e98:	080062f0 	.word	0x080062f0
 8005e9c:	080062fa 	.word	0x080062fa
 8005ea0:	00000000 	.word	0x00000000
 8005ea4:	08005bfd 	.word	0x08005bfd
 8005ea8:	080062f6 	.word	0x080062f6

08005eac <_printf_common>:
 8005eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb0:	4616      	mov	r6, r2
 8005eb2:	4698      	mov	r8, r3
 8005eb4:	688a      	ldr	r2, [r1, #8]
 8005eb6:	690b      	ldr	r3, [r1, #16]
 8005eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	bfb8      	it	lt
 8005ec0:	4613      	movlt	r3, r2
 8005ec2:	6033      	str	r3, [r6, #0]
 8005ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ec8:	4607      	mov	r7, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	b10a      	cbz	r2, 8005ed2 <_printf_common+0x26>
 8005ece:	3301      	adds	r3, #1
 8005ed0:	6033      	str	r3, [r6, #0]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	0699      	lsls	r1, r3, #26
 8005ed6:	bf42      	ittt	mi
 8005ed8:	6833      	ldrmi	r3, [r6, #0]
 8005eda:	3302      	addmi	r3, #2
 8005edc:	6033      	strmi	r3, [r6, #0]
 8005ede:	6825      	ldr	r5, [r4, #0]
 8005ee0:	f015 0506 	ands.w	r5, r5, #6
 8005ee4:	d106      	bne.n	8005ef4 <_printf_common+0x48>
 8005ee6:	f104 0a19 	add.w	sl, r4, #25
 8005eea:	68e3      	ldr	r3, [r4, #12]
 8005eec:	6832      	ldr	r2, [r6, #0]
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	dc26      	bgt.n	8005f42 <_printf_common+0x96>
 8005ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	3b00      	subs	r3, #0
 8005efc:	bf18      	it	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	0692      	lsls	r2, r2, #26
 8005f02:	d42b      	bmi.n	8005f5c <_printf_common+0xb0>
 8005f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f08:	4641      	mov	r1, r8
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	47c8      	blx	r9
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d01e      	beq.n	8005f50 <_printf_common+0xa4>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	6922      	ldr	r2, [r4, #16]
 8005f16:	f003 0306 	and.w	r3, r3, #6
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	bf02      	ittt	eq
 8005f1e:	68e5      	ldreq	r5, [r4, #12]
 8005f20:	6833      	ldreq	r3, [r6, #0]
 8005f22:	1aed      	subeq	r5, r5, r3
 8005f24:	68a3      	ldr	r3, [r4, #8]
 8005f26:	bf0c      	ite	eq
 8005f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f2c:	2500      	movne	r5, #0
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	bfc4      	itt	gt
 8005f32:	1a9b      	subgt	r3, r3, r2
 8005f34:	18ed      	addgt	r5, r5, r3
 8005f36:	2600      	movs	r6, #0
 8005f38:	341a      	adds	r4, #26
 8005f3a:	42b5      	cmp	r5, r6
 8005f3c:	d11a      	bne.n	8005f74 <_printf_common+0xc8>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e008      	b.n	8005f54 <_printf_common+0xa8>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4652      	mov	r2, sl
 8005f46:	4641      	mov	r1, r8
 8005f48:	4638      	mov	r0, r7
 8005f4a:	47c8      	blx	r9
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d103      	bne.n	8005f58 <_printf_common+0xac>
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	3501      	adds	r5, #1
 8005f5a:	e7c6      	b.n	8005eea <_printf_common+0x3e>
 8005f5c:	18e1      	adds	r1, r4, r3
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	2030      	movs	r0, #48	@ 0x30
 8005f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f66:	4422      	add	r2, r4
 8005f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f70:	3302      	adds	r3, #2
 8005f72:	e7c7      	b.n	8005f04 <_printf_common+0x58>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4622      	mov	r2, r4
 8005f78:	4641      	mov	r1, r8
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c8      	blx	r9
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d0e6      	beq.n	8005f50 <_printf_common+0xa4>
 8005f82:	3601      	adds	r6, #1
 8005f84:	e7d9      	b.n	8005f3a <_printf_common+0x8e>
	...

08005f88 <_printf_i>:
 8005f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	7e0f      	ldrb	r7, [r1, #24]
 8005f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f90:	2f78      	cmp	r7, #120	@ 0x78
 8005f92:	4691      	mov	r9, r2
 8005f94:	4680      	mov	r8, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	469a      	mov	sl, r3
 8005f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f9e:	d807      	bhi.n	8005fb0 <_printf_i+0x28>
 8005fa0:	2f62      	cmp	r7, #98	@ 0x62
 8005fa2:	d80a      	bhi.n	8005fba <_printf_i+0x32>
 8005fa4:	2f00      	cmp	r7, #0
 8005fa6:	f000 80d2 	beq.w	800614e <_printf_i+0x1c6>
 8005faa:	2f58      	cmp	r7, #88	@ 0x58
 8005fac:	f000 80b9 	beq.w	8006122 <_printf_i+0x19a>
 8005fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fb8:	e03a      	b.n	8006030 <_printf_i+0xa8>
 8005fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fbe:	2b15      	cmp	r3, #21
 8005fc0:	d8f6      	bhi.n	8005fb0 <_printf_i+0x28>
 8005fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8005fc8 <_printf_i+0x40>)
 8005fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc8:	08006021 	.word	0x08006021
 8005fcc:	08006035 	.word	0x08006035
 8005fd0:	08005fb1 	.word	0x08005fb1
 8005fd4:	08005fb1 	.word	0x08005fb1
 8005fd8:	08005fb1 	.word	0x08005fb1
 8005fdc:	08005fb1 	.word	0x08005fb1
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	08005fb1 	.word	0x08005fb1
 8005fe8:	08005fb1 	.word	0x08005fb1
 8005fec:	08005fb1 	.word	0x08005fb1
 8005ff0:	08005fb1 	.word	0x08005fb1
 8005ff4:	08006135 	.word	0x08006135
 8005ff8:	0800605f 	.word	0x0800605f
 8005ffc:	080060ef 	.word	0x080060ef
 8006000:	08005fb1 	.word	0x08005fb1
 8006004:	08005fb1 	.word	0x08005fb1
 8006008:	08006157 	.word	0x08006157
 800600c:	08005fb1 	.word	0x08005fb1
 8006010:	0800605f 	.word	0x0800605f
 8006014:	08005fb1 	.word	0x08005fb1
 8006018:	08005fb1 	.word	0x08005fb1
 800601c:	080060f7 	.word	0x080060f7
 8006020:	6833      	ldr	r3, [r6, #0]
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6032      	str	r2, [r6, #0]
 8006028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800602c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006030:	2301      	movs	r3, #1
 8006032:	e09d      	b.n	8006170 <_printf_i+0x1e8>
 8006034:	6833      	ldr	r3, [r6, #0]
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	1d19      	adds	r1, r3, #4
 800603a:	6031      	str	r1, [r6, #0]
 800603c:	0606      	lsls	r6, r0, #24
 800603e:	d501      	bpl.n	8006044 <_printf_i+0xbc>
 8006040:	681d      	ldr	r5, [r3, #0]
 8006042:	e003      	b.n	800604c <_printf_i+0xc4>
 8006044:	0645      	lsls	r5, r0, #25
 8006046:	d5fb      	bpl.n	8006040 <_printf_i+0xb8>
 8006048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800604c:	2d00      	cmp	r5, #0
 800604e:	da03      	bge.n	8006058 <_printf_i+0xd0>
 8006050:	232d      	movs	r3, #45	@ 0x2d
 8006052:	426d      	negs	r5, r5
 8006054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006058:	4859      	ldr	r0, [pc, #356]	@ (80061c0 <_printf_i+0x238>)
 800605a:	230a      	movs	r3, #10
 800605c:	e011      	b.n	8006082 <_printf_i+0xfa>
 800605e:	6821      	ldr	r1, [r4, #0]
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	0608      	lsls	r0, r1, #24
 8006064:	f853 5b04 	ldr.w	r5, [r3], #4
 8006068:	d402      	bmi.n	8006070 <_printf_i+0xe8>
 800606a:	0649      	lsls	r1, r1, #25
 800606c:	bf48      	it	mi
 800606e:	b2ad      	uxthmi	r5, r5
 8006070:	2f6f      	cmp	r7, #111	@ 0x6f
 8006072:	4853      	ldr	r0, [pc, #332]	@ (80061c0 <_printf_i+0x238>)
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	bf14      	ite	ne
 8006078:	230a      	movne	r3, #10
 800607a:	2308      	moveq	r3, #8
 800607c:	2100      	movs	r1, #0
 800607e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006082:	6866      	ldr	r6, [r4, #4]
 8006084:	60a6      	str	r6, [r4, #8]
 8006086:	2e00      	cmp	r6, #0
 8006088:	bfa2      	ittt	ge
 800608a:	6821      	ldrge	r1, [r4, #0]
 800608c:	f021 0104 	bicge.w	r1, r1, #4
 8006090:	6021      	strge	r1, [r4, #0]
 8006092:	b90d      	cbnz	r5, 8006098 <_printf_i+0x110>
 8006094:	2e00      	cmp	r6, #0
 8006096:	d04b      	beq.n	8006130 <_printf_i+0x1a8>
 8006098:	4616      	mov	r6, r2
 800609a:	fbb5 f1f3 	udiv	r1, r5, r3
 800609e:	fb03 5711 	mls	r7, r3, r1, r5
 80060a2:	5dc7      	ldrb	r7, [r0, r7]
 80060a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060a8:	462f      	mov	r7, r5
 80060aa:	42bb      	cmp	r3, r7
 80060ac:	460d      	mov	r5, r1
 80060ae:	d9f4      	bls.n	800609a <_printf_i+0x112>
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d10b      	bne.n	80060cc <_printf_i+0x144>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07df      	lsls	r7, r3, #31
 80060b8:	d508      	bpl.n	80060cc <_printf_i+0x144>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	6861      	ldr	r1, [r4, #4]
 80060be:	4299      	cmp	r1, r3
 80060c0:	bfde      	ittt	le
 80060c2:	2330      	movle	r3, #48	@ 0x30
 80060c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060cc:	1b92      	subs	r2, r2, r6
 80060ce:	6122      	str	r2, [r4, #16]
 80060d0:	f8cd a000 	str.w	sl, [sp]
 80060d4:	464b      	mov	r3, r9
 80060d6:	aa03      	add	r2, sp, #12
 80060d8:	4621      	mov	r1, r4
 80060da:	4640      	mov	r0, r8
 80060dc:	f7ff fee6 	bl	8005eac <_printf_common>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d14a      	bne.n	800617a <_printf_i+0x1f2>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	b004      	add	sp, #16
 80060ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f043 0320 	orr.w	r3, r3, #32
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	4833      	ldr	r0, [pc, #204]	@ (80061c4 <_printf_i+0x23c>)
 80060f8:	2778      	movs	r7, #120	@ 0x78
 80060fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	6831      	ldr	r1, [r6, #0]
 8006102:	061f      	lsls	r7, r3, #24
 8006104:	f851 5b04 	ldr.w	r5, [r1], #4
 8006108:	d402      	bmi.n	8006110 <_printf_i+0x188>
 800610a:	065f      	lsls	r7, r3, #25
 800610c:	bf48      	it	mi
 800610e:	b2ad      	uxthmi	r5, r5
 8006110:	6031      	str	r1, [r6, #0]
 8006112:	07d9      	lsls	r1, r3, #31
 8006114:	bf44      	itt	mi
 8006116:	f043 0320 	orrmi.w	r3, r3, #32
 800611a:	6023      	strmi	r3, [r4, #0]
 800611c:	b11d      	cbz	r5, 8006126 <_printf_i+0x19e>
 800611e:	2310      	movs	r3, #16
 8006120:	e7ac      	b.n	800607c <_printf_i+0xf4>
 8006122:	4827      	ldr	r0, [pc, #156]	@ (80061c0 <_printf_i+0x238>)
 8006124:	e7e9      	b.n	80060fa <_printf_i+0x172>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	f023 0320 	bic.w	r3, r3, #32
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	e7f6      	b.n	800611e <_printf_i+0x196>
 8006130:	4616      	mov	r6, r2
 8006132:	e7bd      	b.n	80060b0 <_printf_i+0x128>
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	6825      	ldr	r5, [r4, #0]
 8006138:	6961      	ldr	r1, [r4, #20]
 800613a:	1d18      	adds	r0, r3, #4
 800613c:	6030      	str	r0, [r6, #0]
 800613e:	062e      	lsls	r6, r5, #24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	d501      	bpl.n	8006148 <_printf_i+0x1c0>
 8006144:	6019      	str	r1, [r3, #0]
 8006146:	e002      	b.n	800614e <_printf_i+0x1c6>
 8006148:	0668      	lsls	r0, r5, #25
 800614a:	d5fb      	bpl.n	8006144 <_printf_i+0x1bc>
 800614c:	8019      	strh	r1, [r3, #0]
 800614e:	2300      	movs	r3, #0
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	4616      	mov	r6, r2
 8006154:	e7bc      	b.n	80060d0 <_printf_i+0x148>
 8006156:	6833      	ldr	r3, [r6, #0]
 8006158:	1d1a      	adds	r2, r3, #4
 800615a:	6032      	str	r2, [r6, #0]
 800615c:	681e      	ldr	r6, [r3, #0]
 800615e:	6862      	ldr	r2, [r4, #4]
 8006160:	2100      	movs	r1, #0
 8006162:	4630      	mov	r0, r6
 8006164:	f7fa f834 	bl	80001d0 <memchr>
 8006168:	b108      	cbz	r0, 800616e <_printf_i+0x1e6>
 800616a:	1b80      	subs	r0, r0, r6
 800616c:	6060      	str	r0, [r4, #4]
 800616e:	6863      	ldr	r3, [r4, #4]
 8006170:	6123      	str	r3, [r4, #16]
 8006172:	2300      	movs	r3, #0
 8006174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006178:	e7aa      	b.n	80060d0 <_printf_i+0x148>
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	4632      	mov	r2, r6
 800617e:	4649      	mov	r1, r9
 8006180:	4640      	mov	r0, r8
 8006182:	47d0      	blx	sl
 8006184:	3001      	adds	r0, #1
 8006186:	d0ad      	beq.n	80060e4 <_printf_i+0x15c>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	d413      	bmi.n	80061b6 <_printf_i+0x22e>
 800618e:	68e0      	ldr	r0, [r4, #12]
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	4298      	cmp	r0, r3
 8006194:	bfb8      	it	lt
 8006196:	4618      	movlt	r0, r3
 8006198:	e7a6      	b.n	80060e8 <_printf_i+0x160>
 800619a:	2301      	movs	r3, #1
 800619c:	4632      	mov	r2, r6
 800619e:	4649      	mov	r1, r9
 80061a0:	4640      	mov	r0, r8
 80061a2:	47d0      	blx	sl
 80061a4:	3001      	adds	r0, #1
 80061a6:	d09d      	beq.n	80060e4 <_printf_i+0x15c>
 80061a8:	3501      	adds	r5, #1
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	9903      	ldr	r1, [sp, #12]
 80061ae:	1a5b      	subs	r3, r3, r1
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	dcf2      	bgt.n	800619a <_printf_i+0x212>
 80061b4:	e7eb      	b.n	800618e <_printf_i+0x206>
 80061b6:	2500      	movs	r5, #0
 80061b8:	f104 0619 	add.w	r6, r4, #25
 80061bc:	e7f5      	b.n	80061aa <_printf_i+0x222>
 80061be:	bf00      	nop
 80061c0:	08006301 	.word	0x08006301
 80061c4:	08006312 	.word	0x08006312

080061c8 <memmove>:
 80061c8:	4288      	cmp	r0, r1
 80061ca:	b510      	push	{r4, lr}
 80061cc:	eb01 0402 	add.w	r4, r1, r2
 80061d0:	d902      	bls.n	80061d8 <memmove+0x10>
 80061d2:	4284      	cmp	r4, r0
 80061d4:	4623      	mov	r3, r4
 80061d6:	d807      	bhi.n	80061e8 <memmove+0x20>
 80061d8:	1e43      	subs	r3, r0, #1
 80061da:	42a1      	cmp	r1, r4
 80061dc:	d008      	beq.n	80061f0 <memmove+0x28>
 80061de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061e6:	e7f8      	b.n	80061da <memmove+0x12>
 80061e8:	4402      	add	r2, r0
 80061ea:	4601      	mov	r1, r0
 80061ec:	428a      	cmp	r2, r1
 80061ee:	d100      	bne.n	80061f2 <memmove+0x2a>
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061fa:	e7f7      	b.n	80061ec <memmove+0x24>

080061fc <memcpy>:
 80061fc:	440a      	add	r2, r1
 80061fe:	4291      	cmp	r1, r2
 8006200:	f100 33ff 	add.w	r3, r0, #4294967295
 8006204:	d100      	bne.n	8006208 <memcpy+0xc>
 8006206:	4770      	bx	lr
 8006208:	b510      	push	{r4, lr}
 800620a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800620e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006212:	4291      	cmp	r1, r2
 8006214:	d1f9      	bne.n	800620a <memcpy+0xe>
 8006216:	bd10      	pop	{r4, pc}

08006218 <_realloc_r>:
 8006218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621c:	4680      	mov	r8, r0
 800621e:	4615      	mov	r5, r2
 8006220:	460c      	mov	r4, r1
 8006222:	b921      	cbnz	r1, 800622e <_realloc_r+0x16>
 8006224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	4611      	mov	r1, r2
 800622a:	f7ff bbad 	b.w	8005988 <_malloc_r>
 800622e:	b92a      	cbnz	r2, 800623c <_realloc_r+0x24>
 8006230:	f7ff fc9a 	bl	8005b68 <_free_r>
 8006234:	2400      	movs	r4, #0
 8006236:	4620      	mov	r0, r4
 8006238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800623c:	f000 f81a 	bl	8006274 <_malloc_usable_size_r>
 8006240:	4285      	cmp	r5, r0
 8006242:	4606      	mov	r6, r0
 8006244:	d802      	bhi.n	800624c <_realloc_r+0x34>
 8006246:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800624a:	d8f4      	bhi.n	8006236 <_realloc_r+0x1e>
 800624c:	4629      	mov	r1, r5
 800624e:	4640      	mov	r0, r8
 8006250:	f7ff fb9a 	bl	8005988 <_malloc_r>
 8006254:	4607      	mov	r7, r0
 8006256:	2800      	cmp	r0, #0
 8006258:	d0ec      	beq.n	8006234 <_realloc_r+0x1c>
 800625a:	42b5      	cmp	r5, r6
 800625c:	462a      	mov	r2, r5
 800625e:	4621      	mov	r1, r4
 8006260:	bf28      	it	cs
 8006262:	4632      	movcs	r2, r6
 8006264:	f7ff ffca 	bl	80061fc <memcpy>
 8006268:	4621      	mov	r1, r4
 800626a:	4640      	mov	r0, r8
 800626c:	f7ff fc7c 	bl	8005b68 <_free_r>
 8006270:	463c      	mov	r4, r7
 8006272:	e7e0      	b.n	8006236 <_realloc_r+0x1e>

08006274 <_malloc_usable_size_r>:
 8006274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006278:	1f18      	subs	r0, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfbc      	itt	lt
 800627e:	580b      	ldrlt	r3, [r1, r0]
 8006280:	18c0      	addlt	r0, r0, r3
 8006282:	4770      	bx	lr

08006284 <_init>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr

08006290 <_fini>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr
